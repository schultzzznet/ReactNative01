openapi: 3.0.1
info:
  title: Pure API
  description: This is an early access version of the new Pure write API.
  termsOfService: ""
  contact:
    name: ""
    url: ""
    email: b.plauborg@elsevier.com
  license:
    name: ""
    url: ""
  version: 0.1 Early Access
servers:
- url: /ws/api
security:
- api-key: []
paths:
  /events:
    get:
      tags:
      - event
      summary: Lists all events
      description: Lists all events in the Pure instance. If you need to filter the
        events returned, see the POST version which supports additional filtering.
      operationId: event_list
      parameters:
      - name: size
        in: query
        description: Number of returned events per request.
        schema:
          maximum: 1000
          type: integer
          format: int32
          default: 10
      - name: offset
        in: query
        description: The offset for the returned list. 0 or null value is from the
          start
        schema:
          type: integer
          format: int32
          default: 0
      - name: order
        in: query
        description: The order of the list, must be a value from getEventOrderings
        schema:
          type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventListResult'
    put:
      tags:
      - event
      summary: Create event
      description: Create event
      operationId: event_create
      requestBody:
        description: The content to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /events/allowed-classified-identifier-types:
    get:
      tags:
      - event
      summary: A list of allowed classified identifier types
      description: Get a list of allowed classified identifier types that can be used
        for the 'identifiers.type' attribute of events
      operationId: event_getAllowedClassifiedIdentifierTypes
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /events/allowed-countries:
    get:
      tags:
      - event
      summary: A list of allowed countries
      description: Get a list of allowed countries that can be used for the 'country'
        attribute of events
      operationId: event_getAllowedCountries
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /events/allowed-degree-of-recognition:
    get:
      tags:
      - event
      summary: A list of allowed degree of recognitions
      description: Get a list of allowed degree of recognitions that can be used for
        the 'degreeOfRecognition' attribute of events
      operationId: event_getAllowedDegreeOfRecognitions
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /events/allowed-keyword-group-configurations:
    get:
      tags:
      - event
      summary: A list of keyword group configurations
      description: Get a list of allowed keyword group configurations that can be
        used when submitting keyword groups.
      operationId: event_getAllowedKeywordGroupConfigurations
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeywordGroupConfigurationList'
  /events/allowed-keyword-group-configurations/{id}/classifications:
    get:
      tags:
      - event
      summary: A list of allowed classifications for the specified keyword group
      description: Get a list of allowed classifications that can be used when submitting
        a specified keyword group.
      operationId: event_getAllowedKeywordGroupConfigurationClassifications
      parameters:
      - name: id
        in: path
        description: Pure id of the keyword group configuration
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /events/allowed-link-types:
    get:
      tags:
      - event
      summary: A list of allowed link types
      description: Get a list of allowed link types that can be used for the 'links.linkType'
        attribute of events
      operationId: event_getAllowedLinkTypes
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /events/allowed-locales:
    get:
      tags:
      - event
      summary: A list of allowed locales in localized strings
      description: Get a list of allowed locales that can be used when submitting
        localized string entities.
      operationId: event_getAllowedLocales
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocalesList'
  /events/allowed-subdivision:
    get:
      tags:
      - event
      summary: A list of allowed subdivisions
      description: Get a list of allowed subdivisions can be used for the 'subdivision'
        attribute of events
      operationId: event_getAllowedSubdivisions
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /events/allowed-types:
    get:
      tags:
      - event
      summary: A list of allowed event types
      description: Get a list of allowed types that can be used for the 'type' attribute
        of events
      operationId: event_getAllowedTypes
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /events/allowed-workflow-steps:
    get:
      tags:
      - event
      summary: A list of allowed workflow steps
      description: Get a list of allowed workflow steps that can be used for the 'workflow'
        attribute of events
      operationId: event_getAllowedWorkflowSteps
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowListResult'
  /events/orderings:
    get:
      tags:
      - event
      summary: Lists available orderings
      description: Lists all orderings available to the event endpoint. These values
        can be used by the order parameter.
      operationId: event_getOrderings
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderingsList'
  /events/search:
    post:
      tags:
      - event
      summary: Query operation for events
      description: Lists events in the Pure instance that matches the provided query,
        similar to the GET version, instead of using parameters to alter the response,
        an JSON document is posted with the request. The JSON document contains fields
        for all the parameters available for the GET version, but also additional
        filtering options.
      operationId: events_query
      requestBody:
        description: The query to perform
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventsQuery'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventListResult'
        400:
          description: Bad request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /events/{uuid}:
    put:
      tags:
      - event
      summary: Update event
      description: Update event with specific UUID.
      operationId: event_update
      parameters:
      - name: uuid
        in: path
        description: UUID of the event to update
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: The content to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        404:
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
      - event
      summary: Delete event
      description: Delete event with specific UUID.
      operationId: event_delete
      parameters:
      - name: uuid
        in: path
        description: UUID of the event
        required: true
        schema:
          type: string
          format: uuid
      responses:
        204:
          description: Successful operation
        404:
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /events/{uuid}/notes:
    get:
      tags:
      - event
      summary: Lists notes
      description: Lists notes associated with an event ordered by date (nulls last)
      operationId: event_listNotes
      parameters:
      - name: uuid
        in: path
        description: UUID of the event to get notes for
        required: true
        schema:
          type: string
          format: uuid
      - name: size
        in: query
        description: Number of returned notes per request
        schema:
          maximum: 1000
          type: integer
          format: int32
          default: 10
      - name: offset
        in: query
        description: The offset for the returned list. 0 or null value is from the
          start
        schema:
          type: integer
          format: int32
          default: 0
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoteListResult'
        404:
          description: Event not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
      - event
      summary: Create note
      description: Create note and associate it with an event
      operationId: event_createNote
      parameters:
      - name: uuid
        in: path
        description: UUID of the event to add note to
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: The note to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Note'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /external-organizations:
    get:
      tags:
      - externalOrganization
      summary: Lists all external organizations
      description: Lists all external organizations in the Pure instance. If you need
        to filter the external organizations returned, see the POST version which
        supports additional filtering.
      operationId: externalOrganization_list
      parameters:
      - name: size
        in: query
        description: Number of returned external organizations per request.
        schema:
          maximum: 1000
          type: integer
          format: int32
          default: 10
      - name: offset
        in: query
        description: The offset for the returned list. 0 or null value is from the
          start
        schema:
          type: integer
          format: int32
          default: 0
      - name: order
        in: query
        description: The order of the list, must be a value from externalOrganization_getOrderings
        schema:
          type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalOrganizationListResult'
    put:
      tags:
      - externalOrganization
      summary: Create external organization
      description: Create external organization
      operationId: externalOrganization_create
      requestBody:
        description: The content to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalOrganization'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalOrganization'
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /external-organizations/allowed-address-countries:
    get:
      tags:
      - externalOrganization
      summary: A list of allowed address countries
      description: Get a list of allowed countries that can be used for the 'address.country'
        attribute of external organizations
      operationId: externalOrganization_getAllowedAddressCountries
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /external-organizations/allowed-address-subdivision:
    get:
      tags:
      - externalOrganization
      summary: A list of allowed address subdivisions
      description: Get a list of allowed subdivisions that can be used for the 'address.subdivisions'
        attribute of external organizations
      operationId: externalOrganization_getAllowedAddressSubdivisions
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /external-organizations/allowed-classified-file-types:
    get:
      tags:
      - externalOrganization
      summary: A list of allowed classified identifier types
      description: Get a list of allowed classified image types that can be used for
        the 'images.type' attribute of external organizations
      operationId: externalOrganization_getAllowedClassifiedImageTypes
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /external-organizations/allowed-classified-identifier-types:
    get:
      tags:
      - externalOrganization
      summary: A list of allowed classified identifier types
      description: Get a list of allowed classified identifier types that can be used
        for the 'identifiers.type' attribute of external organizations
      operationId: externalOrganization_getAllowedClassifiedIdentifierTypes
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /external-organizations/allowed-document-licenses:
    get:
      tags:
      - externalOrganization
      summary: A list of allowed document licenses
      description: Get a list of allowed document licenses that can be used for the
        'documents.license' attribute of external organizations
      operationId: externalOrganization_getAllowedDocumentLicenses
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /external-organizations/allowed-document-types:
    get:
      tags:
      - externalOrganization
      summary: A list of allowed document types
      description: Get a list of allowed document types that can be used for the 'documents.type'
        attribute of external organizations
      operationId: externalOrganization_getAllowedDocumentTypes
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /external-organizations/allowed-keyword-group-configurations:
    get:
      tags:
      - externalOrganization
      summary: A list of keyword group configurations
      description: Get a list of allowed keyword group configurations that can be
        used when submitting keyword groups.
      operationId: externalOrganization_getAllowedKeywordGroupConfigurations
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeywordGroupConfigurationList'
  /external-organizations/allowed-keyword-group-configurations/{id}/classifications:
    get:
      tags:
      - externalOrganization
      summary: A list of allowed classifications for the specified keyword group
      description: Get a list of allowed classifications that can be used when submitting
        a specified keyword group.
      operationId: externalOrganization_getAllowedKeywordGroupConfigurationClassifications
      parameters:
      - name: id
        in: path
        description: Pure id of the keyword group configuration
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /external-organizations/allowed-link-types:
    get:
      tags:
      - externalOrganization
      summary: A list of allowed link types
      description: Get a list of allowed link types that can be used for the 'links.linkType'
        attribute of external organizations
      operationId: externalOrganization_getAllowedLinkTypes
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /external-organizations/allowed-locales:
    get:
      tags:
      - externalOrganization
      summary: A list of allowed locales in localized strings
      description: Get a list of allowed locales that can be used when submitting
        localized string entities.
      operationId: externalOrganization_getAllowedLocales
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocalesList'
  /external-organizations/allowed-nature-types:
    get:
      tags:
      - externalOrganization
      summary: A list of allowed nature types
      description: Get a list of allowed nature types that can be used for the 'natureTypes'
        attribute of external organizations
      operationId: externalOrganization_getAllowedNatureTypes
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /external-organizations/allowed-types:
    get:
      tags:
      - externalOrganization
      summary: A list of allowed external organization types
      description: Get a list of allowed types that can be used for the 'type' attribute
        of external organizations
      operationId: externalOrganization_getAllowedTypes
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /external-organizations/allowed-workflow-steps:
    get:
      tags:
      - externalOrganization
      summary: A list of allowed workflow steps
      description: Get a list of allowed workflow steps that can be used for the 'workflow'
        attribute of external organizations
      operationId: externalOrganization_getAllowedWorkflowSteps
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowListResult'
  /external-organizations/file-uploads:
    put:
      tags:
      - externalOrganization
      summary: Upload file to a specific external organization
      description: Uploads file for the external organization
      operationId: externalOrganization_fileUploads
      parameters:
      - name: Content-Type
        in: header
        description: Set the mime type for the file
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              format: binary
        required: true
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadedFile'
            application/xml:
              schema:
                $ref: '#/components/schemas/UploadedFile'
  /external-organizations/merge:
    post:
      tags:
      - externalOrganization
      summary: Merge external organizations
      description: Merge a list of external organizations together. Note that this
        operation is irreversible
      operationId: externalOrganization_merge
      requestBody:
        description: References to the entities to merge. The first will be the target.
          All additional entities will be merged into the target.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalOrganizationRefList'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalOrganization'
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /external-organizations/orderings:
    get:
      tags:
      - externalOrganization
      summary: Lists available orderings
      description: Lists all orderings available to the external organization endpoint.
        These values can be used by the order parameter.
      operationId: externalOrganization_getOrderings
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderingsList'
  /external-organizations/preview-deduplication:
    post:
      tags:
      - externalOrganization
      summary: Preview deduplication of external organizations
      description: Runs through a list external organizations and returns the deduplicated
        and merged organizations. The operation does not touch the Pure database
      operationId: externalOrganization_previewDeduplication
      requestBody:
        description: The content to deduplicate. The data do not need to exist in
          the database.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalOrganizationList'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalOrganizationListResult'
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /external-organizations/search:
    post:
      tags:
      - externalOrganization
      summary: Query operation for external organizations
      description: Lists external organizations in the Pure instance that matches
        the provided query, similar to the GET version, instead of using parameters
        to alter the response, an JSON document is posted with the request. The JSON
        document contains fields for all the parameters available for the GET version,
        but also additional filtering options.
      operationId: externalOrganization_query
      requestBody:
        description: The query to perform
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalOrganizationsQuery'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalOrganizationListResult'
        400:
          description: Bad request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /external-organizations/{uuid}:
    get:
      tags:
      - externalOrganization
      summary: Get external organization
      description: Get external organization with specific UUID.
      operationId: externalOrganization_get
      parameters:
      - name: uuid
        in: path
        description: UUID of the desired external organization
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalOrganization'
        301:
          description: The requested content have changed UUID
        404:
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
      - externalOrganization
      summary: Update external organization
      description: Update external organization with specific UUID.
      operationId: externalOrganization_update
      parameters:
      - name: uuid
        in: path
        description: UUID of the external organization to update
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: The content to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalOrganization'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalOrganization'
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        404:
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
      - externalOrganization
      summary: Delete external organization
      description: Delete external organization with specific UUID.
      operationId: externalOrganization_delete
      parameters:
      - name: uuid
        in: path
        description: UUID of the external organization
        required: true
        schema:
          type: string
          format: uuid
      responses:
        204:
          description: Successful operation
        404:
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /external-organizations/{uuid}/dependents:
    get:
      tags:
      - externalOrganization
      summary: Lists all dependents to the external organization
      description: 'Lists all dependents to the external organization with the specified
        UUID. If the user dont have access to view all the dependent content, an authorization
        error will be thrown. '
      operationId: externalOrganization_dependents
      parameters:
      - name: uuid
        in: path
        description: UUID of the external organization to update
        required: true
        schema:
          type: string
          format: uuid
      - name: verbose
        in: query
        description: 'Default: false. Setting this to true will add links and names
          to the output but will also have an impact on performance. Use with coution.'
        schema:
          type: boolean
          default: false
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentRefListResult'
  /external-organizations/{uuid}/files/{fileId}:
    get:
      tags:
      - externalOrganization
      summary: Get file from the external organization
      description: Get file from the external organization
      operationId: externalOrganization_getFile
      parameters:
      - name: uuid
        in: path
        description: UUID of the external organization
        required: true
        schema:
          type: string
          format: uuid
      - name: fileId
        in: path
        description: 'File id '
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful operation
          content:
            '*/*':
              schema:
                type: string
                format: binary
  /external-organizations/{uuid}/notes:
    get:
      tags:
      - externalOrganization
      summary: Lists notes
      description: Lists notes associated with an external organization ordered by
        date (nulls last)
      operationId: externalOrganization_listNotes
      parameters:
      - name: uuid
        in: path
        description: UUID of the external organization to get notes for
        required: true
        schema:
          type: string
          format: uuid
      - name: size
        in: query
        description: Number of returned notes per request
        schema:
          maximum: 1000
          type: integer
          format: int32
          default: 10
      - name: offset
        in: query
        description: The offset for the returned list. 0 or null value is from the
          start
        schema:
          type: integer
          format: int32
          default: 0
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoteListResult'
        404:
          description: External organization not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
      - externalOrganization
      summary: Create note
      description: Create note and associate it with an external organization
      operationId: externalOrganization_createNote
      parameters:
      - name: uuid
        in: path
        description: UUID of the external organization to add note to
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: The note to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Note'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /external-persons:
    get:
      tags:
      - externalPerson
      summary: Lists all external persons
      description: Lists all external persons in the Pure instance. If you need to
        filter the external persons returned, see the POST version which supports
        additional filtering.
      operationId: externalPerson_list
      parameters:
      - name: size
        in: query
        description: Number of returned external persons per request.
        schema:
          maximum: 1000
          type: integer
          format: int32
          default: 10
      - name: offset
        in: query
        description: The offset for the returned list. 0 or null value is from the
          start
        schema:
          type: integer
          format: int32
          default: 0
      - name: order
        in: query
        description: The order of the list, must be a value from getExternalPersonOrderings
        schema:
          type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalPersonListResult'
    put:
      tags:
      - externalPerson
      summary: Create external person
      description: Create external person
      operationId: externalPerson_create
      requestBody:
        description: The content to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalPerson'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalPerson'
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /external-persons/allowed-classified-identifier-types:
    get:
      tags:
      - externalPerson
      summary: A list of allowed classified identifier types
      description: Get a list of allowed classified identifier types that can be used
        for the 'identifiers.type' attribute of external persons
      operationId: externalPerson_getAllowedClassifiedIdentifierTypes
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /external-persons/allowed-countries:
    get:
      tags:
      - externalPerson
      summary: A list of allowed countries
      description: Get a list of allowed countries that can be used for the 'countries'
        attribute of external persons
      operationId: externalPerson_getAllowedCountries
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /external-persons/allowed-keyword-group-configurations:
    get:
      tags:
      - externalPerson
      summary: A list of keyword group configurations
      description: Get a list of allowed keyword group configurations that can be
        used when submitting keyword groups.
      operationId: externalPerson_getAllowedKeywordGroupConfigurations
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeywordGroupConfigurationList'
  /external-persons/allowed-keyword-group-configurations/{id}/classifications:
    get:
      tags:
      - externalPerson
      summary: A list of allowed classifications for the specified keyword group
      description: Get a list of allowed classifications that can be used when submitting
        a specified keyword group.
      operationId: externalPerson_getAllowedKeywordGroupConfigurationClassifications
      parameters:
      - name: id
        in: path
        description: Pure id of the keyword group configuration
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /external-persons/allowed-locales:
    get:
      tags:
      - externalPerson
      summary: A list of allowed locales in localized strings
      description: Get a list of allowed locales that can be used when submitting
        localized string entities.
      operationId: externalPerson_getAllowedLocales
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocalesList'
  /external-persons/allowed-types:
    get:
      tags:
      - externalPerson
      summary: A list of allowed external person types
      description: Get a list of allowed types that can be used for the 'type' attribute
        of external persons
      operationId: externalPerson_getAllowedTypes
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /external-persons/allowed-workflow-steps:
    get:
      tags:
      - externalPerson
      summary: A list of allowed workflow steps
      description: Get a list of allowed workflow steps that can be used for the 'workflow'
        attribute of external persons
      operationId: externalPerson_getAllowedWorkflowSteps
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowListResult'
  /external-persons/orderings:
    get:
      tags:
      - externalPerson
      summary: Lists available orderings
      description: Lists all orderings available to the external person endpoint.
        These values can be used by the order parameter.
      operationId: externalPerson_getOrderings
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderingsList'
  /external-persons/search:
    post:
      tags:
      - externalPerson
      summary: Query operation for external persons
      description: Lists external persons in the Pure instance that matches the provided
        query, similar to the GET version, instead of using parameters to alter the
        response, an JSON document is posted with the request. The JSON document contains
        fields for all the parameters available for the GET version, but also additional
        filtering options.
      operationId: externalPerson_query
      requestBody:
        description: The query to perform
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalPersonsQuery'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalPersonListResult'
        400:
          description: Bad request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /external-persons/{uuid}:
    get:
      tags:
      - externalPerson
      summary: Get external person
      description: Get external person with specific UUID.
      operationId: externalPerson_get
      parameters:
      - name: uuid
        in: path
        description: UUID of the desired external person
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalPerson'
        301:
          description: The requested content have changed UUID
        404:
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
      - externalPerson
      summary: Update external persons
      description: Update external persons with specific UUID.
      operationId: externalPerson_update
      parameters:
      - name: uuid
        in: path
        description: UUID of the external person to update
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: The content to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalPerson'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalPerson'
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        404:
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
      - externalPerson
      summary: Delete external person
      description: Delete external person with specific UUID.
      operationId: externalPerson_delete
      parameters:
      - name: uuid
        in: path
        description: UUID of the external person
        required: true
        schema:
          type: string
          format: uuid
      responses:
        204:
          description: Successful operation
        404:
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /external-persons/{uuid}/dependents:
    get:
      tags:
      - externalPerson
      summary: Lists all dependents to a external person
      description: 'Lists all dependents to a external person with the specified UUID.
        If the user dont have access to view all the dependent content, an authorization
        error will be thrown. '
      operationId: externalPerson_dependents
      parameters:
      - name: uuid
        in: path
        description: UUID of the external person
        required: true
        schema:
          type: string
          format: uuid
      - name: verbose
        in: query
        description: 'Default: false. Setting this to true will add links and names
          to the output but will also have an impact on performance. Use with coution.'
        schema:
          type: boolean
          default: false
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentRefListResult'
  /journals:
    get:
      tags:
      - journal
      summary: Lists all journals
      description: Lists all journals in the Pure instance. If you need to filter
        the journals returned, see the POST version which supports additional filtering.
      operationId: journal_list
      parameters:
      - name: size
        in: query
        description: Number of returned journals per request.
        schema:
          maximum: 1000
          type: integer
          format: int32
          default: 10
      - name: offset
        in: query
        description: The offset for the returned list. 0 or null value is from the
          start
        schema:
          type: integer
          format: int32
          default: 0
      - name: order
        in: query
        description: The order of the list, must be a value from getJournalOrderings
        schema:
          type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JournalListResult'
    put:
      tags:
      - journal
      summary: Create journal
      description: Create journal
      operationId: journal_create
      requestBody:
        description: The content to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Journal'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Journal'
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /journals/allowed-classified-identifier-types:
    get:
      tags:
      - journal
      summary: A list of allowed classified identifier types
      description: Get a list of allowed classified identifier types that can be used
        for the 'identifiers.type' attribute of journals
      operationId: journal_getAllowedClassifiedIdentifierTypes
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /journals/allowed-countries:
    get:
      tags:
      - journal
      summary: A list of allowed countries
      description: Get a list of allowed countries that can be used for the 'journal.country'
        attribute of journals
      operationId: journal_getAllowedCountries
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /journals/allowed-keyword-group-configurations:
    get:
      tags:
      - journal
      summary: A list of keyword group configurations
      description: Get a list of allowed keyword group configurations that can be
        used when submitting keyword groups.
      operationId: journal_getAllowedKeywordGroupConfigurations
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeywordGroupConfigurationList'
  /journals/allowed-keyword-group-configurations/{id}/classifications:
    get:
      tags:
      - journal
      summary: A list of allowed classifications for the specified keyword group
      description: Get a list of allowed classifications that can be used when submitting
        a specified keyword group.
      operationId: journal_getAllowedKeywordGroupConfigurationClassifications
      parameters:
      - name: id
        in: path
        description: Pure id of the keyword group configuration
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /journals/allowed-link-types:
    get:
      tags:
      - journal
      summary: A list of allowed link types
      description: Get a list of allowed link types that can be used for the 'links.linkType'
        attribute of journals
      operationId: journal_getAllowedLinkTypes
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /journals/allowed-locales:
    get:
      tags:
      - journal
      summary: A list of allowed locales in localized strings
      description: Get a list of allowed locales that can be used when submitting
        localized string entities.
      operationId: journal_getAllowedLocales
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocalesList'
  /journals/allowed-types:
    get:
      tags:
      - journal
      summary: A list of allowed journal types
      description: Get a list of allowed types that can be used for the 'type' attribute
        of journal
      operationId: journal_getAllowedTypes
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /journals/allowed-workflow-steps:
    get:
      tags:
      - journal
      summary: A list of allowed workflow steps
      description: Get a list of allowed workflow steps that can be used for the 'workflow'
        attribute of journals
      operationId: journal_getAllowedWorkflowSteps
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowListResult'
  /journals/orderings:
    get:
      tags:
      - journal
      summary: Lists available orderings
      description: Lists all orderings available to the journal endpoint. These values
        can be used by the order parameter.
      operationId: journal_getOrderings
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderingsList'
  /journals/search:
    post:
      tags:
      - journal
      summary: Query operation for journals
      description: Lists journals in the Pure instance that matches the provided query,
        similar to the GET version, instead of using parameters to alter the response,
        an JSON document is posted with the request. The JSON document contains fields
        for all the parameters available for the GET version, but also additional
        filtering options.
      operationId: journal_query
      requestBody:
        description: The query to perform
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JournalsQuery'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JournalListResult'
        400:
          description: Bad request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /journals/{uuid}:
    get:
      tags:
      - journal
      summary: Get journal
      description: Get journal with specific UUID.
      operationId: journal_get
      parameters:
      - name: uuid
        in: path
        description: UUID of the desired journal
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Journal'
        301:
          description: The requested content have changed UUID
        404:
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
      - journal
      summary: Update journal
      description: Update journal with specific UUID.
      operationId: journal_update
      parameters:
      - name: uuid
        in: path
        description: UUID of the journal to update
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: The content to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Journal'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Journal'
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        404:
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
      - journal
      summary: Delete journal
      description: Delete journal with specific UUID.
      operationId: journal_delete
      parameters:
      - name: uuid
        in: path
        description: UUID of the journal
        required: true
        schema:
          type: string
          format: uuid
      responses:
        204:
          description: Successful operation
        404:
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /journals/{uuid}/dependents:
    get:
      tags:
      - journal
      summary: Lists all dependents to a journal
      description: 'Lists all dependents to a journal with the specified UUID. If
        the user dont have access to view all the dependent content, an authorization
        error will be thrown. '
      operationId: journal_dependents
      parameters:
      - name: uuid
        in: path
        description: UUID of the journal
        required: true
        schema:
          type: string
          format: uuid
      - name: verbose
        in: query
        description: 'Default: false. Setting this to true will add links and names
          to the output but will also have an impact on performance. Use with coution.'
        schema:
          type: boolean
          default: false
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentRefListResult'
  /journals/{uuid}/notes:
    get:
      tags:
      - journal
      summary: Lists notes
      description: Lists notes associated with the journal ordered by date (nulls
        last)
      operationId: journal_listNotes
      parameters:
      - name: uuid
        in: path
        description: UUID of the journal to get notes for
        required: true
        schema:
          type: string
          format: uuid
      - name: size
        in: query
        description: Number of returned notes per request
        schema:
          maximum: 1000
          type: integer
          format: int32
          default: 10
      - name: offset
        in: query
        description: The offset for the returned list. 0 or null value is from the
          start
        schema:
          type: integer
          format: int32
          default: 0
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoteListResult'
        404:
          description: Journal not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
      - journal
      summary: Create note
      description: Create note and associate it with a journal
      operationId: journal_createNote
      parameters:
      - name: uuid
        in: path
        description: UUID of the journal to add note to
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: The note to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Note'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /organizations:
    get:
      tags:
      - organization
      summary: Lists all organizations
      description: Lists all organizations in the Pure instance. If you need to filter
        the organizations returned, see the POST version which supports additional
        filtering.
      operationId: organization_list
      parameters:
      - name: size
        in: query
        description: Number of returned organizations per request.
        schema:
          maximum: 1000
          type: integer
          format: int32
          default: 10
      - name: offset
        in: query
        description: The offset for the returned list. 0 or null value is from the
          start
        schema:
          type: integer
          format: int32
          default: 0
      - name: order
        in: query
        description: The order of the list, must be a value from organization_getOrderings
        schema:
          type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationListResult'
    put:
      tags:
      - organization
      summary: Create organization
      description: Create organization
      operationId: organization_create
      requestBody:
        description: The content to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /organizations/allowed-address-countries:
    get:
      tags:
      - organization
      summary: A list of allowed address countries
      description: Get a list of allowed countries that can be used for the 'addresses.country'
        attribute of organizations
      operationId: organization_getAllowedAddressCountries
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /organizations/allowed-address-subdivision:
    get:
      tags:
      - organization
      summary: A list of allowed address subdivisions
      description: Get a list of allowed subdivisions that can be used for the 'addresses.subdivisions'
        attribute of organizations
      operationId: organization_getAllowedAddressSubdivisions
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /organizations/allowed-address-types:
    get:
      tags:
      - organization
      summary: A list of allowed address types
      description: Get a list of allowed address types that can be used for the 'addresses.type'
        attribute of organizations
      operationId: organization_getAllowedAddressTypes
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /organizations/allowed-classified-file-types:
    get:
      tags:
      - organization
      summary: A list of allowed classified identifier types
      description: Get a list of allowed classified photo types that can be used for
        the 'photos.type' attribute of organizations
      operationId: organization_getAllowedClassifiedImageTypes
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /organizations/allowed-classified-identifier-types:
    get:
      tags:
      - organization
      summary: A list of allowed classified identifier types
      description: Get a list of allowed classified identifier types that can be used
        for the 'identifiers.type' attribute of organizations
      operationId: organization_getAllowedClassifiedIdentifierTypes
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /organizations/allowed-cost-centers:
    get:
      tags:
      - organization
      summary: A list of allowed cost centers
      description: Get a list of allowed cost centers that can be used for the 'costCenters'
        attribute of organizations
      operationId: organization_getAllowedCostCenters
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /organizations/allowed-email-types:
    get:
      tags:
      - organization
      summary: A list of allowed e-mail types
      description: Get a list of allowed e-mail types that can be used for the 'emails.type'
        attribute of organizations
      operationId: organization_getAllowedEmailTypes
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /organizations/allowed-keyword-group-configurations:
    get:
      tags:
      - organization
      summary: A list of keyword group configurations
      description: Get a list of allowed keyword group configurations that can be
        used when submitting keyword groups.
      operationId: organization_getAllowedKeywordGroupConfigurations
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeywordGroupConfigurationList'
  /organizations/allowed-keyword-group-configurations/{id}/classifications:
    get:
      tags:
      - organization
      summary: A list of allowed classifications for the specified keyword group
      description: Get a list of allowed classifications that can be used when submitting
        a specified keyword group.
      operationId: organization_getAllowedKeywordGroupConfigurationClassifications
      parameters:
      - name: id
        in: path
        description: Pure id of the keyword group configuration
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /organizations/allowed-locales:
    get:
      tags:
      - organization
      summary: A list of allowed locales in localized strings
      description: Get a list of allowed locales that can be used when submitting
        localized string entities.
      operationId: organization_getAllowedLocales
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocalesList'
  /organizations/allowed-name-variant-types:
    get:
      tags:
      - organization
      summary: A list of allowed name variant types
      description: Get a list of allowed name variant types that can be used for the
        'nameVariants.type' attribute of organizations
      operationId: organization_getAllowedNameVariantTypes
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /organizations/allowed-phone-number-types:
    get:
      tags:
      - organization
      summary: A list of allowed phone number types
      description: Get a list of allowed phone number types that can be used for the
        'phoneNumbers.type' attribute of organizations
      operationId: organization_getAllowedPhoneNumberTypes
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /organizations/allowed-photo-types:
    get:
      tags:
      - organization
      summary: A list of allowed photo types
      description: Get a list of allowed photo types that can be used for the 'photos.type'
        attribute of organizations
      operationId: organization_getAllowedPhotoTypes
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /organizations/allowed-profile-information-types:
    get:
      tags:
      - organization
      summary: A list of allowed profile information types
      description: Get a list of allowed profile information types that can be used
        for the 'profileInformations.type' attribute of organizations
      operationId: organization_getAllowedProfileInformationTypes
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /organizations/allowed-types:
    get:
      tags:
      - organization
      summary: A list of allowed organization types
      description: Get a list of allowed types that can be used for the 'type' attribute
        of organizations
      operationId: organization_getAllowedTypes
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /organizations/allowed-web-address-types:
    get:
      tags:
      - organization
      summary: A list of allowed web address types
      description: Get a list of allowed web address types that can be used for the
        'webAddresses.type' attribute of organizations
      operationId: organization_getAllowedWebAddressTypes
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /organizations/file-uploads:
    put:
      tags:
      - organization
      summary: Upload file to a specific organization
      description: Uploads file for the organization
      operationId: organization_fileUploads
      parameters:
      - name: Content-Type
        in: header
        description: Set the mime type for the file
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              format: binary
        required: true
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadedFile'
            application/xml:
              schema:
                $ref: '#/components/schemas/UploadedFile'
  /organizations/orderings:
    get:
      tags:
      - organization
      summary: Lists available orderings
      description: Lists all orderings available to the organization endpoint. These
        values can be used by the order parameter.
      operationId: organization_getOrderings
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderingsList'
  /organizations/search:
    post:
      tags:
      - organization
      summary: Query operation for organizations
      description: Lists organizations in the Pure instance that matches the provided
        query, similar to the GET version, instead of using parameters to alter the
        response, an JSON document is posted with the request. The JSON document contains
        fields for all the parameters available for the GET version, but also additional
        filtering options.
      operationId: organization_query
      requestBody:
        description: The query to perform
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationsQuery'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationListResult'
        400:
          description: Bad request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /organizations/{uuid}:
    get:
      tags:
      - organization
      summary: Get organization
      description: Get organization with specific UUID.
      operationId: organization_get
      parameters:
      - name: uuid
        in: path
        description: UUID of the desired organization
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        301:
          description: The requested content have changed UUID
        404:
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
      - organization
      summary: Update organization
      description: Update organization with specific UUID.
      operationId: organization_update
      parameters:
      - name: uuid
        in: path
        description: UUID of the organization to update
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: The content to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        404:
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
      - organization
      summary: Delete organization
      description: Delete organization with specific UUID.
      operationId: organization_delete
      parameters:
      - name: uuid
        in: path
        description: UUID of the organization
        required: true
        schema:
          type: string
          format: uuid
      responses:
        204:
          description: Successful operation
        404:
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /organizations/{uuid}/dependents:
    get:
      tags:
      - organization
      summary: Lists all dependents to the organization
      description: 'Lists all dependents to the organization with the specified UUID.
        If the user dont have access to view all the dependent content, an authorization
        error will be thrown. '
      operationId: organization_dependents
      parameters:
      - name: uuid
        in: path
        description: UUID of the organization
        required: true
        schema:
          type: string
          format: uuid
      - name: verbose
        in: query
        description: 'Default: false. Setting this to true will add links and names
          to the output but will also have an impact on performance. Use with coution.'
        schema:
          type: boolean
          default: false
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentRefListResult'
  /organizations/{uuid}/files/{fileId}:
    get:
      tags:
      - organization
      summary: Get file from the organization
      description: Get file from the organization
      operationId: organization_getFile
      parameters:
      - name: uuid
        in: path
        description: UUID of the organization
        required: true
        schema:
          type: string
          format: uuid
      - name: fileId
        in: path
        description: Id of the file
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful operation
          content:
            '*/*':
              schema:
                type: string
                format: binary
  /organizations/{uuid}/notes:
    get:
      tags:
      - organization
      summary: Lists notes
      description: Lists notes associated with an organization ordered by date (nulls
        last)
      operationId: organization_listNotes
      parameters:
      - name: uuid
        in: path
        description: UUID of the organization to get notes for
        required: true
        schema:
          type: string
          format: uuid
      - name: size
        in: query
        description: Number of returned notes per request
        schema:
          maximum: 1000
          type: integer
          format: int32
          default: 10
      - name: offset
        in: query
        description: The offset for the returned list. 0 or null value is from the
          start
        schema:
          type: integer
          format: int32
          default: 0
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoteListResult'
        404:
          description: Organization not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
      - organization
      summary: Create note
      description: Create note and associate it with an organization
      operationId: organization_createNote
      parameters:
      - name: uuid
        in: path
        description: UUID of the organization to add note to
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: The note to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Note'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /persons:
    get:
      tags:
      - person
      summary: Lists all persons
      description: Lists all persons in the Pure instance. If you need to filter the
        persons returned, see the POST version which supports additional filtering.
      operationId: person_list
      parameters:
      - name: size
        in: query
        description: Number of returned persons per request.
        schema:
          maximum: 1000
          type: integer
          format: int32
          default: 10
      - name: offset
        in: query
        description: The offset for the returned list. 0 or null value is from the
          start
        schema:
          type: integer
          format: int32
          default: 0
      - name: order
        in: query
        description: The order of the list, must be a value from getPersonOrderings
        schema:
          type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonListResult'
    put:
      tags:
      - person
      summary: Create person
      description: Create person
      operationId: person_create
      requestBody:
        description: The content to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /persons/allowed-academic-qualifications-field-of-studies:
    get:
      tags:
      - person
      summary: A list of the allowed values for field of study
      description: Get a list of classifications that can be used for the 'academicQualifications.fieldOfStudy'
        attribute of persons
      operationId: person_getAllowedAcademicQualificationsFieldOfStudies
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /persons/allowed-address-countries:
    get:
      tags:
      - person
      summary: A list of allowed address countries
      description: Get a list of allowed countries that can be used for the 'addresses.country'
        attribute of persons
      operationId: person_getAllowedAddressCountries
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /persons/allowed-address-subdivisions:
    get:
      tags:
      - person
      summary: A list of allowed subdivisions
      description: Get a list of allowed subdivisions can be used for the 'subdivision'
        attribute of person organization associations
      operationId: person_getAllowedAddressSubdivisions
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /persons/allowed-address-types:
    get:
      tags:
      - person
      summary: A list of allowed address types
      description: Get a list of allowed address types that can be used for the 'addresses.type'
        attribute of persons
      operationId: person_getAllowedAddressTypes
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /persons/allowed-allowed-academic-qualification-types:
    get:
      tags:
      - person
      summary: A list of allowed academic qualification types for persons
      description: Get a list of allowed academic qualification types for persons
      operationId: person_getAllowedAcademicQualificationsTypes
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /persons/allowed-allowed-profile-photo-types:
    get:
      tags:
      - person
      summary: A list of allowed types for person profile photos
      description: Get a list of allowed types for person profile photos
      operationId: person_getAllowedProfilePhotosTypes
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /persons/allowed-classified-identifier-types:
    get:
      tags:
      - person
      summary: A list of allowed classified identifier types
      description: Get a list of allowed classified identifier types that can be used
        for the 'identifiers.type' attribute of persons
      operationId: person_getAllowedClassifiedIdentifierTypes
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /persons/allowed-external-positions-appointments:
    get:
      tags:
      - person
      summary: A list of the allowed values for appointments
      description: Get a list of classifications that can be used for the 'externalPositions.appointment'
        attribute of persons
      operationId: person_getAllowedExternalPositionsAppointments
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /persons/allowed-genders:
    get:
      tags:
      - person
      summary: A list of allowed classifications for the gender property
      description: Get a list of classifications that can be used when submitting
        the person gender property.
      operationId: person_getAllowedGenders
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /persons/allowed-keyword-group-configurations:
    get:
      tags:
      - person
      summary: A list of keyword group configurations
      description: Get a list of allowed keyword group configurations that can be
        used when submitting keyword groups.
      operationId: person_getAllowedKeywordGroupConfigurations
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeywordGroupConfigurationList'
  /persons/allowed-keyword-group-configurations/{id}/classifications:
    get:
      tags:
      - person
      summary: A list of allowed classifications for the specified keyword group
      description: Get a list of allowed classifications that can be used when submitting
        a specified keyword group.
      operationId: person_getAllowedKeywordGroupConfigurationClassifications
      parameters:
      - name: id
        in: path
        description: Pure id of the keyword group configuration
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /persons/allowed-leave-of-absense:
    get:
      tags:
      - person
      summary: A list of allowed classifications for the leave of absence property
      description: Get a list of classifications that can be used when submitting
        the leaveOfAbsence property.
      operationId: person_getAllowedLeavesOfAbsenceClassifications
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /persons/allowed-link-types:
    get:
      tags:
      - person
      summary: A list of allowed link types
      description: Get a list of allowed link types that can be used for the 'links.linkType'
        attribute of persons
      operationId: person_getAllowedLinkTypes
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /persons/allowed-locales:
    get:
      tags:
      - person
      summary: A list of allowed locales in localized strings
      description: Get a list of allowed locales that can be used when submitting
        localized string entities.
      operationId: person_getAllowedLocales
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocalesList'
  /persons/allowed-names-types:
    get:
      tags:
      - person
      summary: A list of allowed classifications for classified names
      description: Get a list of allowed classifications that can be used when submitting
        a classified name.
      operationId: person_getAllowedNamesTypes
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /persons/allowed-nationalities:
    get:
      tags:
      - person
      summary: A list of allowed classifications for the nationalities property
      description: Get a list of classifications that can be used when submitting
        the nationality property.
      operationId: person_getAllowedNationalities
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /persons/allowed-person-organization-associations-email-types:
    get:
      tags:
      - person
      summary: A list of allowed email types
      description: Get a list of allowed email types for person organisation associations
        on persons
      operationId: person_getAllowedPersonOrganizationAssociationsEmailTypes
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /persons/allowed-person-organization-associations-employment-types:
    get:
      tags:
      - person
      summary: A list of allowed employment types
      description: Get a list of allowed employment types for person organisation
        associations on persons
      operationId: person_getAllowedPersonOrganizationAssociationsEmploymentTypes
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /persons/allowed-person-organization-associations-job-titles:
    get:
      tags:
      - person
      summary: A list of allowed job titles
      description: Get a list of allowed job titles for person organisation associations
        on persons
      operationId: person_getAllowedPersonOrganizationAssociationsJobTitles
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /persons/allowed-person-organization-associations-phonenumber-types:
    get:
      tags:
      - person
      summary: A list of allowed phone number types
      description: Get a list of allowed phone numbers types for person organisation
        associations on persons
      operationId: person_getAllowedPersonOrganizationAssociationsPhoneNumberTypes
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /persons/allowed-person-organization-associations-supervisor-roles:
    get:
      tags:
      - person
      summary: A list of allowed supervisor roles
      description: Get a list of allowed supervisor roles for person organisation
        associations on persons
      operationId: person_getAllowedPersonOrganizationAssociationsSupervisorRoles
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /persons/allowed-person-organization-associations-webaddress-types:
    get:
      tags:
      - person
      summary: A list of allowed web address types
      description: Get a list of allowed web address types for person organisation
        associations on persons
      operationId: person_getAllowedPersonOrganizationAssociationsWebAddressTypes
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /persons/allowed-private-address-countries:
    get:
      tags:
      - person
      summary: A list of allowed country classifications for private address
      description: Get a list of allowed country classifications for private address
        on persons
      operationId: person_getAllowedPrivateAddressCountries
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /persons/allowed-profile-information-types:
    get:
      tags:
      - person
      summary: A list of allowed classifications for the profile information property
      description: Get a list of classifications that can be used when submitting
        an entry in profile information.
      operationId: person_getAllowedProfileInformationTypes
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /persons/allowed-profile-photo-types:
    get:
      tags:
      - person
      summary: A list of allowed photo types
      description: Get a list of allowed photo types that can be used for the 'profilePhotos.type'
        attribute of persons
      operationId: person_getAllowedProfilePhotoTypes
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /persons/allowed-staff-organization-associations-contract-types:
    get:
      tags:
      - person
      summary: A list of allowed contract types
      description: Get a list of allowed contract types for staff organisation associations
        on persons
      operationId: person_getAllowedStaffOrganizationAssociationsContractTypes
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /persons/allowed-staff-organization-associations-staff-types:
    get:
      tags:
      - person
      summary: A list of allowed staff types
      description: Get a list of allowed staff types for staff organisation associations
        on persons
      operationId: person_getAllowedStaffOrganizationAssociationsStaffTypes
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /persons/allowed-student-organization-associations-employment-types:
    get:
      tags:
      - person
      summary: A list of allowed employment types
      description: Get a list of allowed employment types for student organisation
        associations on persons
      operationId: person_getAllowedStudentAssociationsEmploymentTypes
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /persons/allowed-titles-types:
    get:
      tags:
      - person
      summary: A list of allowed classifications for the titles property
      description: Get a list of classifications that can be used when submitting
        a title.
      operationId: person_getAllowedTitlesTypes
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /persons/allowed-visiting-scholar-organization-associations-employment-types:
    get:
      tags:
      - person
      summary: A list of allowed employment types
      description: Get a list of allowed employment types for visiting scholar organisation
        associations on persons
      operationId: person_getAllowedVisitingScholarAssociationsEmploymentTypes
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /persons/file-uploads:
    put:
      tags:
      - person
      summary: Upload file to a specific person
      description: Uploads file for the person
      operationId: person_fileUploads
      parameters:
      - name: Content-Type
        in: header
        description: Set the mime type for the file
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              format: binary
        required: true
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadedFile'
            application/xml:
              schema:
                $ref: '#/components/schemas/UploadedFile'
  /persons/orderings:
    get:
      tags:
      - person
      summary: Lists available orderings
      description: Lists all orderings available to the person endpoint. These values
        can be used by the order parameter.
      operationId: person_getOrderings
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderingsList'
  /persons/search:
    post:
      tags:
      - person
      summary: Query operation for persons
      description: Lists persons in the Pure instance that matches the provided query,
        similar to the GET version, instead of using parameters to alter the response,
        an JSON document is posted with the request. The JSON document contains fields
        for all the parameters available for the GET version, but also additional
        filtering options.
      operationId: person_query
      requestBody:
        description: The query to perform
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonsQuery'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonListResult'
        400:
          description: Bad request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /persons/{uuid}:
    get:
      tags:
      - person
      summary: Get person
      description: Get person with specific UUID.
      operationId: person_get
      parameters:
      - name: uuid
        in: path
        description: UUID of the desired person
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        301:
          description: The requested content have changed UUID
        404:
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
      - person
      summary: Update person
      description: Update person with specific UUID.
      operationId: person_update
      parameters:
      - name: uuid
        in: path
        description: UUID of the person to update
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: The content to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Person'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Person'
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        404:
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
      - person
      summary: Delete person
      description: Delete person with specific UUID.
      operationId: person_delete
      parameters:
      - name: uuid
        in: path
        description: UUID of the person
        required: true
        schema:
          type: string
          format: uuid
      responses:
        204:
          description: Successful operation
        404:
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /persons/{uuid}/files/{fileId}:
    get:
      tags:
      - person
      summary: Get file from the person
      description: Get file from the person
      operationId: person_getFile
      parameters:
      - name: uuid
        in: path
        description: UUID of the person
        required: true
        schema:
          type: string
          format: uuid
      - name: fileId
        in: path
        description: 'File id '
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful operation
          content:
            '*/*':
              schema:
                type: string
                format: binary
  /persons/{uuid}/highlighted-content:
    get:
      tags:
      - person
      summary: Get highlighted content
      description: Get highlighted content for the person with the specific UUID.
        Highlights are only available for editorial types
      operationId: person_getHighlightedContent
      parameters:
      - name: uuid
        in: path
        description: UUID of the owner (person) of the highlighted content
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HighlightedContent'
        404:
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
      - person
      summary: Update highlighted content
      description: Update highlighted content references. Add an empty array of references
        for a content type to not highlight any items of this type. Types that are
        not present will be ignored. Highlights can only be updated for editorial
        types
      operationId: person_updateHighlightedContent
      parameters:
      - name: uuid
        in: path
        description: UUID of the person to update highlighted content for
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: The highlighted content references to set on the person
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HighlightedContent'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HighlightedContent'
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /persons/{uuid}/notes:
    get:
      tags:
      - person
      summary: Lists notes
      description: Lists notes associated with an person ordered by date (nulls last)
      operationId: person_listNotes
      parameters:
      - name: uuid
        in: path
        description: UUID of the person to get notes for
        required: true
        schema:
          type: string
          format: uuid
      - name: size
        in: query
        description: Number of returned notes per request
        schema:
          maximum: 1000
          type: integer
          format: int32
          default: 10
      - name: offset
        in: query
        description: The offset for the returned list. 0 or null value is from the
          start
        schema:
          type: integer
          format: int32
          default: 0
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoteListResult'
        404:
          description: person not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
      - person
      summary: Create note
      description: Create note and associate it with a person
      operationId: person_createNote
      parameters:
      - name: uuid
        in: path
        description: UUID of the person to add note to
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: The note to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Note'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /persons/{uuid}/supervisee:
    get:
      tags:
      - person
      summary: person supervisees
      description: Find supervisees of a person by their specific UUID.
      operationId: person_supervisee
      parameters:
      - name: uuid
        in: path
        description: UUID of the person
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonSuperviseeAssociationListResult'
        404:
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /publishers:
    get:
      tags:
      - publisher
      summary: Lists all publishers
      description: Lists all publishers in the Pure instance. If you need to filter
        the publishers returned, see the POST version which supports additional filtering.
      operationId: publisher_list
      parameters:
      - name: size
        in: query
        description: Number of returned publishers per request.
        schema:
          maximum: 1000
          type: integer
          format: int32
          default: 10
      - name: offset
        in: query
        description: The offset for the returned list. 0 or null value is from the
          start
        schema:
          type: integer
          format: int32
          default: 0
      - name: order
        in: query
        description: The order of the list, must be a value from publisher_getOrderings
        schema:
          type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublisherListResult'
    put:
      tags:
      - publisher
      summary: Create publisher
      description: Create publisher
      operationId: publisher_create
      requestBody:
        description: The content to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Publisher'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publisher'
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /publishers/allowed-countries:
    get:
      tags:
      - publisher
      summary: A list of allowed countries
      description: Get a list of allowed countries that can be used for the 'countries'
        attribute of publishers
      operationId: publishers_getAllowedCountries
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /publishers/allowed-keyword-group-configurations:
    get:
      tags:
      - publisher
      summary: A list of keyword group configurations
      description: Get a list of allowed keyword group configurations that can be
        used when submitting keyword groups.
      operationId: publisher_getAllowedKeywordGroupConfigurations
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeywordGroupConfigurationList'
  /publishers/allowed-keyword-group-configurations/{id}/classifications:
    get:
      tags:
      - publisher
      summary: A list of allowed classifications for the specified keyword group
      description: Get a list of allowed classifications that can be used when submitting
        a specified keyword group.
      operationId: publisher_getAllowedKeywordGroupConfigurationClassifications
      parameters:
      - name: id
        in: path
        description: Pure id of the keyword group configuration
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /publishers/allowed-locales:
    get:
      tags:
      - publisher
      summary: A list of allowed locales in localized strings
      description: Get a list of allowed locales that can be used when submitting
        localized string entities.
      operationId: publisher_getAllowedLocales
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocalesList'
  /publishers/allowed-types:
    get:
      tags:
      - publisher
      summary: A list of allowed publisher types
      description: Get a list of allowed types that can be used for the 'type' attribute
        of publishers
      operationId: publisher_getAllowedTypes
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClassificationRefList'
  /publishers/allowed-workflow-steps:
    get:
      tags:
      - publisher
      summary: A list of allowed workflow steps
      description: Get a list of allowed workflow steps that can be used for the 'workflow'
        attribute of publishers
      operationId: publisher_getAllowedWorkflowSteps
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowListResult'
  /publishers/orderings:
    get:
      tags:
      - publisher
      summary: Lists available orderings
      description: Lists all orderings available to the publisher endpoint. These
        values can be used by the order parameter.
      operationId: publisher_getOrderings
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderingsList'
  /publishers/search:
    post:
      tags:
      - publisher
      summary: Query operation for publishers
      description: Lists publishers in the Pure instance that matches the provided
        query, similar to the GET version, instead of using parameters to alter the
        response, an JSON document is posted with the request. The JSON document contains
        fields for all the parameters available for the GET version, but also additional
        filtering options.
      operationId: publisher_query
      requestBody:
        description: The query to perform
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublishersQuery'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublisherListResult'
        400:
          description: Bad request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /publishers/{uuid}:
    get:
      tags:
      - publisher
      summary: Get publisher
      description: Get publisher with specific UUID.
      operationId: publisher_get
      parameters:
      - name: uuid
        in: path
        description: UUID of the desired publisher
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publisher'
        301:
          description: The requested content have changed UUID
        404:
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
      - publisher
      summary: Update publishers
      description: Update publishers with specific UUID.
      operationId: publisher_update
      parameters:
      - name: uuid
        in: path
        description: UUID of the publisher to update
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: The content to update
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Publisher'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Publisher'
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        404:
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
      - publisher
      summary: Delete publisher
      description: Delete publisher with specific UUID.
      operationId: publisher_delete
      parameters:
      - name: uuid
        in: path
        description: UUID of the publisher
        required: true
        schema:
          type: string
          format: uuid
      responses:
        204:
          description: Successful operation
        404:
          description: Resource not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /publishers/{uuid}/dependents:
    get:
      tags:
      - publisher
      summary: Lists all dependents to a publisher
      description: 'Lists all dependents to a publisher with the specified UUID. If
        the user dont have access to view all the dependent content, an authorization
        error will be thrown. '
      operationId: publisher_dependents
      parameters:
      - name: uuid
        in: path
        description: UUID of the publisher
        required: true
        schema:
          type: string
          format: uuid
      - name: verbose
        in: query
        description: 'Default: false. Setting this to true will add links and names
          to the output but will also have an impact on performance. Use with coution.'
        schema:
          type: boolean
          default: false
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentRefListResult'
  /publishers/{uuid}/notes:
    get:
      tags:
      - publisher
      summary: Lists notes
      description: Lists notes associated with a publisher ordered by date (nulls
        last)
      operationId: publisher_listNotes
      parameters:
      - name: uuid
        in: path
        description: UUID of the publisher to get notes for
        required: true
        schema:
          type: string
          format: uuid
      - name: size
        in: query
        description: Number of returned notes per request
        schema:
          maximum: 1000
          type: integer
          format: int32
          default: 10
      - name: offset
        in: query
        description: The offset for the returned list. 0 or null value is from the
          start
        schema:
          type: integer
          format: int32
          default: 0
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoteListResult'
        404:
          description: Publisher not found
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    put:
      tags:
      - publisher
      summary: Create note
      description: Create note and associate it with a publisher
      operationId: publisher_createNote
      parameters:
      - name: uuid
        in: path
        description: UUID of the publisher to add note to
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        description: The note to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Note'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        400:
          description: Bad Request
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
components:
  schemas:
    AcademicQualification:
      type: object
      properties:
        pureId:
          type: integer
          description: Pure database ID of the object, prefer using the UUID if it
            is present on the entity
          format: int64
          readOnly: true
        awardDate:
          type: string
          description: Date that the education was awarded at.
          format: date-time
        period:
          $ref: '#/components/schemas/CompoundDateRange'
        fieldOfStudy:
          $ref: '#/components/schemas/ClassificationRef'
        fieldOfStudyUnstructured:
          $ref: '#/components/schemas/LocalizedString'
        organization:
          $ref: '#/components/schemas/OrganizationOrExternalOrganizationRef'
        projectTitle:
          $ref: '#/components/schemas/LocalizedString'
        qualification:
          $ref: '#/components/schemas/ClassificationRef'
        qualificationUnstructured:
          $ref: '#/components/schemas/LocalizedString'
      description: An object mapping the data of an education received by a person
    ActivityRef:
      required:
      - systemName
      - uuid
      type: object
      description: A reference to an activity
      allOf:
      - $ref: '#/components/schemas/ContentRef'
    AdditionalISSN:
      required:
      - issn
      - typeDiscriminator
      type: object
      properties:
        issn:
          type: string
          description: The actual ISSN value
        typeDiscriminator:
          type: string
      nullable: true
      discriminator:
        propertyName: typeDiscriminator
        mapping:
          ElectronicISSN: '#/components/schemas/ElectronicISSN'
          AlternativeISSN: '#/components/schemas/AlternativeISSN'
    Address:
      type: object
      properties:
        road:
          type: string
          description: Name of road and house number, eg. 'Pennsylvania Avenue' or
            '123 Main St.'
        room:
          type: string
          description: Room number or name if available, eg. '1.23' or 'Office of
            Creative Services'
        building:
          type: string
          description: Building Name if available, eg. 'Couper Administration Building'
        postalCode:
          type: string
          description: Postal code
        city:
          type: string
          description: City or town, eg. 'Binghamton'
        country:
          $ref: '#/components/schemas/ClassificationRef'
      description: A physical address
      nullable: true
    AlternativeISSN:
      required:
      - issn
      type: object
      description: Additional non electronic ISSN, is searchable but cannot be used
        when relating the journal to other content
      allOf:
      - $ref: '#/components/schemas/AdditionalISSN'
    ApplicationRef:
      required:
      - systemName
      - uuid
      type: object
      description: A reference to an application
      allOf:
      - $ref: '#/components/schemas/ContentRef'
    AwardRef:
      required:
      - systemName
      - uuid
      type: object
      description: A reference to an award
      allOf:
      - $ref: '#/components/schemas/ContentRef'
    CERIFAddress:
      type: object
      properties:
        address1:
          type: string
          description: Address line 1
          nullable: true
        address2:
          type: string
          description: Address line 2
          nullable: true
        address3:
          type: string
          description: Address line 3
          nullable: true
        address4:
          type: string
          description: Address line 4
          nullable: true
        address5:
          type: string
          description: Address line 5
          nullable: true
        postalCode:
          type: string
          description: Postal code of city
          nullable: true
        city:
          type: string
          description: City
          nullable: true
        country:
          $ref: '#/components/schemas/ClassificationRef'
        subdivision:
          $ref: '#/components/schemas/ClassificationRef'
        state:
          type: string
          description: State. Mutually exclusive with state
          nullable: true
        geoLocation:
          $ref: '#/components/schemas/GeoLocation'
      description: A physical address
      nullable: true
    ClassificationRef:
      required:
      - uri
      type: object
      properties:
        uri:
          type: string
          description: Classification URI of the referred classification
        link:
          $ref: '#/components/schemas/NavigationLink'
        term:
          $ref: '#/components/schemas/SystemLocalizedString'
      description: A reference to a classification value
      nullable: true
    ClassificationRefList:
      type: object
      properties:
        classifications:
          type: array
          items:
            $ref: '#/components/schemas/ClassificationRef'
      description: List of classification references
    ClassificationSchemeRef:
      required:
      - baseUri
      - systemName
      - uuid
      type: object
      description: A reference to a classification scheme
      allOf:
      - $ref: '#/components/schemas/ContentRef'
      - type: object
        properties:
          baseUri:
            type: string
            description: Classification scheme base URI
    ClassificationsKeywordGroup:
      required:
      - logicalName
      - typeDiscriminator
      type: object
      description: De-normalized version of the full keyword group representation
        for instances where only structured keywords can be selected
      allOf:
      - $ref: '#/components/schemas/KeywordGroup'
      - type: object
        properties:
          classifications:
            type: array
            description: A list classifications extracted from the keyword group structured
              keyword concept
            nullable: true
            items:
              $ref: '#/components/schemas/ClassificationRef'
    ClassifiedAddress:
      type: object
      properties:
        pureId:
          type: integer
          description: Pure database ID of the object, prefer using the UUID if it
            is present on the entity
          format: int64
          readOnly: true
        addressType:
          $ref: '#/components/schemas/ClassificationRef'
        addressLines:
          type: string
          description: Address for personal residence
          nullable: true
        street:
          type: string
          description: The name of the street
          nullable: true
        building:
          type: string
          description: The name of the building
          nullable: true
        postalcode:
          type: string
          description: The postal code of the city
          nullable: true
        city:
          type: string
          description: The name of the city
          nullable: true
        country:
          $ref: '#/components/schemas/ClassificationRef'
        subdivision:
          $ref: '#/components/schemas/ClassificationRef'
        geoLocation:
          $ref: '#/components/schemas/GeoLocation'
      description: A physical address
    ClassifiedFile:
      required:
      - fileName
      type: object
      properties:
        pureId:
          type: integer
          description: Pure database ID of the object, prefer using the UUID if it
            is present on the entity
          format: int64
          readOnly: true
        fileId:
          type: string
          description: The id of the file
          readOnly: true
        fileName:
          type: string
          description: The documents file name
        mimeType:
          type: string
          description: The documents mime type
        size:
          type: integer
          description: The documents size in bytes
          format: int64
        url:
          type: string
          description: Download url for the binary file
          readOnly: true
        uploadedFile:
          $ref: '#/components/schemas/UploadedFile'
        fileData:
          type: string
          description: Base64 encoded file data for new files. This property can be
            used instead of uploadedFile for small files
          format: byte
          writeOnly: true
        type:
          $ref: '#/components/schemas/ClassificationRef'
      description: A classified file
    ClassifiedId:
      required:
      - id
      - type
      type: object
      description: A classified ID
      allOf:
      - $ref: '#/components/schemas/Identifier'
      - type: object
        properties:
          pureId:
            type: integer
            description: Pure database ID of the object
            format: int64
            readOnly: true
          id:
            type: string
            description: Classified ID
          type:
            $ref: '#/components/schemas/ClassificationRef'
    ClassifiedLocalizedValue:
      type: object
      properties:
        pureId:
          type: integer
          description: Pure database ID of the object, prefer using the UUID if it
            is present on the entity
          format: int64
          readOnly: true
        value:
          $ref: '#/components/schemas/LocalizedString'
        type:
          $ref: '#/components/schemas/ClassificationRef'
      description: A classified localized value
    ClassifiedName:
      type: object
      properties:
        pureId:
          type: integer
          description: Pure database ID of the object, prefer using the UUID if it
            is present on the entity
          format: int64
          readOnly: true
        name:
          $ref: '#/components/schemas/Name'
        type:
          $ref: '#/components/schemas/ClassificationRef'
      description: A classified name
    ClassifiedValue:
      type: object
      properties:
        pureId:
          type: integer
          description: Pure database ID of the object, prefer using the UUID if it
            is present on the entity
          format: int64
          readOnly: true
        value:
          type: string
          description: Classified value
        type:
          $ref: '#/components/schemas/ClassificationRef'
      description: A classified value
    CompoundDate:
      required:
      - year
      type: object
      properties:
        year:
          maximum: 4000
          minimum: 0
          type: integer
          format: int32
        month:
          maximum: 12
          minimum: 1
          type: integer
          format: int32
          nullable: true
        day:
          maximum: 31
          minimum: 1
          type: integer
          format: int32
          nullable: true
      description: A date that can be defined by only year, year and month or a full
        date
    CompoundDateRange:
      type: object
      properties:
        startDate:
          $ref: '#/components/schemas/CompoundDate'
        endDate:
          $ref: '#/components/schemas/CompoundDate'
      description: A date range of that can be defined by only year, year and month
        or a full date
    ContentRef:
      required:
      - systemName
      - uuid
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the referred content
          format: uuid
        systemName:
          type: string
          description: The system name of the content
        link:
          $ref: '#/components/schemas/NavigationLink'
        name:
          $ref: '#/components/schemas/LocalizedString'
      nullable: true
      discriminator:
        propertyName: systemName
        mapping:
          ClassificationScheme: '#/components/schemas/ClassificationSchemeRef'
          ExternalOrganization: '#/components/schemas/ExternalOrganizationRef'
          ExternalPerson: '#/components/schemas/ExternalPersonRef'
          Organization: '#/components/schemas/OrganizationRef'
          ResearchOutput: '#/components/schemas/ResearchOutputRef'
          DataSet: '#/components/schemas/DataSetRef'
          Journal: '#/components/schemas/JournalRef'
          Activity: '#/components/schemas/ActivityRef'
          Publisher: '#/components/schemas/PublisherRef'
          Application: '#/components/schemas/ApplicationRef'
          Award: '#/components/schemas/AwardRef'
          Event: '#/components/schemas/EventRef'
          Person: '#/components/schemas/PersonRef'
          User: '#/components/schemas/UserRef'
    ContentRefListResult:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ContentRef'
      description: List of Content Refs
    DataSetRef:
      required:
      - systemName
      - uuid
      type: object
      description: A reference to a data set
      allOf:
      - $ref: '#/components/schemas/ContentRef'
    DateRange:
      type: object
      properties:
        startDate:
          type: string
          description: Start date
          format: date-time
          nullable: true
        endDate:
          type: string
          description: End date
          format: date-time
          nullable: true
      description: A date range
    DependencyViolationProblemDetails:
      type: object
      description: Problem details for dependency violation failures, typically seen
        when deleting an entity that referred to from other dependent entities
      allOf:
      - $ref: '#/components/schemas/ProblemDetails'
      - type: object
        properties:
          dependencyViolationErrors:
            type: array
            description: A list of dependant content that block deletion, may not
              be a complete list if the number of dependencies is very large
            items:
              $ref: '#/components/schemas/ContentRef'
    Document:
      required:
      - fileName
      type: object
      properties:
        pureId:
          type: integer
          description: Pure database ID of the object, prefer using the UUID if it
            is present on the entity
          format: int64
          readOnly: true
        fileId:
          type: string
          description: The id of the file
          readOnly: true
        fileName:
          type: string
          description: The documents file name
        mimeType:
          type: string
          description: The documents mime type
        size:
          type: integer
          description: The documents size in bytes
          format: int64
        url:
          type: string
          description: Download url for the binary file
          readOnly: true
        uploadedFile:
          $ref: '#/components/schemas/UploadedFile'
        fileData:
          type: string
          description: Base64 encoded file data for new files. This property can be
            used instead of uploadedFile for small files
          format: byte
          writeOnly: true
        title:
          type: string
          description: Document title
          nullable: true
        type:
          $ref: '#/components/schemas/ClassificationRef'
        license:
          $ref: '#/components/schemas/ClassificationRef'
        visibleOnPortalDate:
          type: string
          description: The date the document will be available on the portal
          format: date-time
          readOnly: true
        visibility:
          $ref: '#/components/schemas/Visibility'
        creator:
          type: string
          description: The user that created the document
          readOnly: true
        created:
          type: string
          description: Create date for the document
          format: date-time
          readOnly: true
      description: Document
    ElectronicISSN:
      required:
      - issn
      type: object
      description: Additional Electronic ISSN, is searchable but cannot be used when
        relating the journal to other content
      allOf:
      - $ref: '#/components/schemas/AdditionalISSN'
    Event:
      type: object
      properties:
        pureId:
          type: integer
          description: Pure database ID of the object, prefer using the UUID if it
            is present on the entity
          format: int64
          readOnly: true
        uuid:
          type: string
          description: UUID, this is the primary identity of the entity
          format: uuid
          readOnly: true
        createdBy:
          type: string
          description: Username of creator
          readOnly: true
        createdDate:
          type: string
          description: Date and time of creation
          format: date-time
          readOnly: true
        modifiedBy:
          type: string
          description: Username of the user that performed a modification
          readOnly: true
        modifiedDate:
          type: string
          description: Date and time of last modification
          format: date-time
          readOnly: true
        portalUrl:
          type: string
          description: URL of the content on the Pure Portal
          readOnly: true
        prettyUrlIdentifiers:
          type: array
          description: All pretty URLs
          readOnly: true
          items:
            type: string
            description: All pretty URLs
            readOnly: true
        previousUuids:
          type: array
          description: UUIDs of other content items which have been merged into this
            content item (or similar)
          readOnly: true
          items:
            type: string
            description: UUIDs of other content items which have been merged into
              this content item (or similar)
            readOnly: true
        externallyManaged:
          type: boolean
          description: Signals that the information is maintained by synchronization
            from an external system
          readOnly: true
        version:
          type: string
          description: A hash representing the current version of the content. For
            new content this is null, and for existing content the current value.
            The property should never be modified explicitly by a client.
          nullable: true
        type:
          $ref: '#/components/schemas/ClassificationRef'
        abbreviatedTitle:
          $ref: '#/components/schemas/FormattedLocalizedString'
        geoLocation:
          $ref: '#/components/schemas/GeoLocation'
        city:
          type: string
          description: The city of the event
          nullable: true
        conferenceNumber:
          type: string
          description: The conference number of the event
          nullable: true
        country:
          $ref: '#/components/schemas/ClassificationRef'
        degreeOfRecognition:
          $ref: '#/components/schemas/ClassificationRef'
        description:
          $ref: '#/components/schemas/FormattedLocalizedString'
        keywordGroups:
          type: array
          description: A group for each type of keyword present
          nullable: true
          items:
            $ref: '#/components/schemas/KeywordGroup'
        links:
          type: array
          description: Links to information about the event
          nullable: true
          items:
            $ref: '#/components/schemas/Link'
        location:
          type: string
          description: The actual location of the event
          nullable: true
        organizers:
          type: array
          description: The organizers of the event
          nullable: true
          items:
            $ref: '#/components/schemas/OrganizationOrExternalOrganizationRef'
        lifecycle:
          $ref: '#/components/schemas/DateRange'
        events:
          type: array
          description: Other events related to this event
          nullable: true
          items:
            $ref: '#/components/schemas/EventRef'
        identifiers:
          type: array
          description: IDs that this object corresponds to in external systems. Such
            as a Scopus ID. Used by Pure where it is necessary to identify objects
            to specific external systems
          nullable: true
          items:
            $ref: '#/components/schemas/Identifier'
        sponsorOrganizations:
          type: array
          description: The event sponsors
          nullable: true
          items:
            $ref: '#/components/schemas/OrganizationOrExternalOrganizationRef'
        subdivision:
          $ref: '#/components/schemas/ClassificationRef'
        title:
          $ref: '#/components/schemas/FormattedLocalizedString'
        subTitle:
          $ref: '#/components/schemas/FormattedLocalizedString'
        workflow:
          $ref: '#/components/schemas/Workflow'
        systemName:
          type: string
          description: The content system name
          readOnly: true
      description: An event typically a conference, workshop or similar
    EventListResult:
      type: object
      properties:
        count:
          type: integer
          description: The full count, ignoring paging
          format: int32
        pageInformation:
          $ref: '#/components/schemas/PageInformation'
        navigationLinks:
          type: array
          description: Links to navigate from this result. Such as a 'prev' link to
            link to the previous page of items
          items:
            $ref: '#/components/schemas/NavigationLink'
        items:
          type: array
          description: Events
          items:
            $ref: '#/components/schemas/Event'
      description: List of events. Can contain a subset of all items along with the
        full count
    EventRef:
      required:
      - systemName
      - uuid
      type: object
      description: A reference to an event
      allOf:
      - $ref: '#/components/schemas/ContentRef'
    EventsQuery:
      type: object
      properties:
        uuids:
          type: array
          items:
            type: string
            format: uuid
        size:
          type: integer
          format: int32
        offset:
          type: integer
          format: int32
        orderings:
          type: array
          items:
            type: string
        searchString:
          type: string
          description: String used to perform search
        orderBy:
          type: string
          writeOnly: true
      description: Create a query for events
    ExternalAppointment:
      type: object
      properties:
        pureId:
          type: integer
          description: Pure database ID of the object, prefer using the UUID if it
            is present on the entity
          format: int64
          readOnly: true
        appointment:
          $ref: '#/components/schemas/ClassificationRef'
        appointmentString:
          $ref: '#/components/schemas/LocalizedString'
        period:
          $ref: '#/components/schemas/CompoundDateRange'
        externalOrganization:
          $ref: '#/components/schemas/ExternalOrganizationRef'
      description: An appointment held in an external organizational unit
    ExternalOrganization:
      type: object
      properties:
        pureId:
          type: integer
          description: Pure database ID of the object, prefer using the UUID if it
            is present on the entity
          format: int64
          readOnly: true
        uuid:
          type: string
          description: UUID, this is the primary identity of the entity
          format: uuid
          readOnly: true
        createdBy:
          type: string
          description: Username of creator
          readOnly: true
        createdDate:
          type: string
          description: Date and time of creation
          format: date-time
          readOnly: true
        modifiedBy:
          type: string
          description: Username of the user that performed a modification
          readOnly: true
        modifiedDate:
          type: string
          description: Date and time of last modification
          format: date-time
          readOnly: true
        portalUrl:
          type: string
          description: URL of the content on the Pure Portal
          readOnly: true
        prettyUrlIdentifiers:
          type: array
          description: All pretty URLs
          readOnly: true
          items:
            type: string
            description: All pretty URLs
            readOnly: true
        previousUuids:
          type: array
          description: UUIDs of other content items which have been merged into this
            content item (or similar)
          readOnly: true
          items:
            type: string
            description: UUIDs of other content items which have been merged into
              this content item (or similar)
            readOnly: true
        externallyManaged:
          type: boolean
          description: Signals that the information is maintained by synchronization
            from an external system
          readOnly: true
        version:
          type: string
          description: A hash representing the current version of the content. For
            new content this is null, and for existing content the current value.
            The property should never be modified explicitly by a client.
          nullable: true
        name:
          $ref: '#/components/schemas/LocalizedString'
        type:
          $ref: '#/components/schemas/ClassificationRef'
        natureTypes:
          type: array
          description: Nature of the organizations work
          nullable: true
          items:
            $ref: '#/components/schemas/ClassificationRef'
        acronym:
          type: string
          description: Acronym of organization name
          nullable: true
        alternativeNames:
          type: array
          description: Alternative names of organization
          nullable: true
          items:
            type: string
        identifiers:
          type: array
          description: IDs that this object corresponds to in external systems. Such
            as a Scopus ID. Used by Pure where it is necessary to identify objects
            to specific external systems
          nullable: true
          items:
            $ref: '#/components/schemas/Identifier'
        address:
          $ref: '#/components/schemas/CERIFAddress'
        phoneNumber:
          type: string
          description: Phone number
          nullable: true
        mobilePhoneNumber:
          type: string
          description: Phone number (mobile)
          nullable: true
        fax:
          type: string
          description: Fax number
          nullable: true
        email:
          type: string
          description: Email address
          format: email
          nullable: true
        bankAccountNumber:
          type: string
          description: Bank account number
          nullable: true
        vatNumber:
          type: string
          description: VAT number
          nullable: true
        documents:
          type: array
          description: Arbitrary documents relevant to the organization
          nullable: true
          items:
            $ref: '#/components/schemas/Document'
        images:
          type: array
          description: External organization image
          nullable: true
          items:
            $ref: '#/components/schemas/ClassifiedFile'
        links:
          type: array
          description: Links to information about the organization
          nullable: true
          items:
            $ref: '#/components/schemas/Link'
        keywordGroups:
          type: array
          description: A group for each type of keyword present
          nullable: true
          items:
            $ref: '#/components/schemas/KeywordGroup'
        note:
          type: string
          description: A free-form note about the organization
          nullable: true
        visibility:
          $ref: '#/components/schemas/Visibility'
        workflow:
          $ref: '#/components/schemas/Workflow'
        systemName:
          type: string
          description: The content system name
          readOnly: true
      description: An organization external to the institution
    ExternalOrganizationList:
      type: object
      properties:
        items:
          type: array
          description: External organizations
          items:
            $ref: '#/components/schemas/ExternalOrganization'
      description: List of organizations external to the institution.
    ExternalOrganizationListResult:
      type: object
      properties:
        count:
          type: integer
          description: The full count, ignoring paging
          format: int32
        pageInformation:
          $ref: '#/components/schemas/PageInformation'
        navigationLinks:
          type: array
          description: Links to navigate from this result. Such as a 'prev' link to
            link to the previous page of items
          items:
            $ref: '#/components/schemas/NavigationLink'
        items:
          type: array
          description: External organizations
          items:
            $ref: '#/components/schemas/ExternalOrganization'
      description: List of organizations external to the institution. Can contain
        a subset of all items along with the full count
    ExternalOrganizationRef:
      required:
      - systemName
      - uuid
      type: object
      description: A reference to an organization external to the institution
      allOf:
      - $ref: '#/components/schemas/ContentRef'
    ExternalOrganizationRefList:
      type: object
      properties:
        items:
          type: array
          description: External organization references
          items:
            $ref: '#/components/schemas/ExternalOrganizationRef'
      description: List of references to organizations external to the institution.
    ExternalOrganizationsQuery:
      type: object
      properties:
        uuids:
          type: array
          items:
            type: string
            format: uuid
        size:
          type: integer
          format: int32
        offset:
          type: integer
          format: int32
        orderings:
          type: array
          items:
            type: string
        keywordURIs:
          type: array
          items:
            type: string
        searchString:
          type: string
          description: String used to perform search
        orderBy:
          type: string
          writeOnly: true
      description: Create a query for external organizations
    ExternalPerson:
      type: object
      properties:
        pureId:
          type: integer
          description: Pure database ID of the object, prefer using the UUID if it
            is present on the entity
          format: int64
          readOnly: true
        uuid:
          type: string
          description: UUID, this is the primary identity of the entity
          format: uuid
          readOnly: true
        createdBy:
          type: string
          description: Username of creator
          readOnly: true
        createdDate:
          type: string
          description: Date and time of creation
          format: date-time
          readOnly: true
        modifiedBy:
          type: string
          description: Username of the user that performed a modification
          readOnly: true
        modifiedDate:
          type: string
          description: Date and time of last modification
          format: date-time
          readOnly: true
        portalUrl:
          type: string
          description: URL of the content on the Pure Portal
          readOnly: true
        prettyUrlIdentifiers:
          type: array
          description: All pretty URLs
          readOnly: true
          items:
            type: string
            description: All pretty URLs
            readOnly: true
        previousUuids:
          type: array
          description: UUIDs of other content items which have been merged into this
            content item (or similar)
          readOnly: true
          items:
            type: string
            description: UUIDs of other content items which have been merged into
              this content item (or similar)
            readOnly: true
        externallyManaged:
          type: boolean
          description: Signals that the information is maintained by synchronization
            from an external system
          readOnly: true
        version:
          type: string
          description: A hash representing the current version of the content. For
            new content this is null, and for existing content the current value.
            The property should never be modified explicitly by a client.
          nullable: true
        identifiers:
          type: array
          description: IDs that this object corresponds to in external systems. Such
            as a Scopus ID. Used by Pure where it is necessary to identify objects
            to specific external systems
          nullable: true
          items:
            $ref: '#/components/schemas/Identifier'
        name:
          $ref: '#/components/schemas/Name'
        type:
          $ref: '#/components/schemas/ClassificationRef'
        title:
          $ref: '#/components/schemas/LocalizedString'
        country:
          $ref: '#/components/schemas/ClassificationRef'
        gender:
          $ref: '#/components/schemas/Gender'
        externalOrganisations:
          type: array
          items:
            $ref: '#/components/schemas/ExternalOrganizationRef'
        keywordGroups:
          type: array
          items:
            $ref: '#/components/schemas/KeywordGroup'
        workflow:
          $ref: '#/components/schemas/Workflow'
        systemName:
          type: string
          description: The content system name
          readOnly: true
      description: A person not known to the institution
    ExternalPersonListResult:
      type: object
      properties:
        count:
          type: integer
          description: The full count, ignoring paging
          format: int32
        pageInformation:
          $ref: '#/components/schemas/PageInformation'
        navigationLinks:
          type: array
          description: Links to navigate from this result. Such as a 'prev' link to
            link to the previous page of items
          items:
            $ref: '#/components/schemas/NavigationLink'
        items:
          type: array
          description: External Persons
          items:
            $ref: '#/components/schemas/ExternalPerson'
      description: List of external persons. Can contain a subset of all items along
        with the full count
    ExternalPersonRef:
      required:
      - systemName
      - uuid
      type: object
      description: A reference to a person external to the institution
      allOf:
      - $ref: '#/components/schemas/ContentRef'
    ExternalPersonsQuery:
      type: object
      properties:
        uuids:
          type: array
          items:
            type: string
            format: uuid
        size:
          type: integer
          format: int32
        offset:
          type: integer
          format: int32
        orderings:
          type: array
          items:
            type: string
        keywordURIs:
          type: array
          items:
            type: string
        searchString:
          type: string
          description: String used to perform search
        orderBy:
          type: string
          writeOnly: true
      description: Create a query for external persons
    FormattedLocalizedString:
      type: object
      additionalProperties:
        type: string
        description: A set of potentially formatted string values each localized for
          a specific submission locale. Please note that invalid locale values will
          be ignored.
        nullable: true
        example: '{"en_GB":"Some text"}'
      description: A set of potentially formatted string values each localized for
        a specific submission locale. Please note that invalid locale values will
        be ignored.
      nullable: true
      example:
        en_GB: Some text
    FreeKeywordsKeywordGroup:
      required:
      - logicalName
      - typeDiscriminator
      type: object
      description: De-normalized version of the full keyword group representation
        for instances where only free keywords can be selected
      allOf:
      - $ref: '#/components/schemas/KeywordGroup'
      - type: object
        properties:
          keywords:
            minItems: 1
            type: array
            description: Free keywords
            items:
              $ref: '#/components/schemas/Keyword'
    FullKeywordGroup:
      required:
      - logicalName
      - typeDiscriminator
      type: object
      description: Keywords of a specific type. A type of keyword can be configured
        to solely support free keywords (represented as the FreeKeywordsKeywordGroup
        type), to solely support structured keywords (represented as the ClassificationsKeywordGroup
        type), or to both support structured keywords supplemented by optional free
        keywords (this type)
      allOf:
      - $ref: '#/components/schemas/KeywordGroup'
      - type: object
        properties:
          keywordContainers:
            type: array
            description: Containers with structured keywords and/or free keywords
            nullable: true
            items:
              $ref: '#/components/schemas/KeywordContainer'
    Gender:
      type: object
      properties:
        key:
          type: string
          enum:
          - MALE
          - FEMALE
          - UNKNOWN
        value:
          $ref: '#/components/schemas/LocalizedString'
      description: A list of possible genders
      nullable: true
    GenericProblemDetails:
      type: object
      description: Problem details for generic failures
      allOf:
      - $ref: '#/components/schemas/ProblemDetails'
    GeoLocation:
      type: object
      properties:
        point:
          type: string
          description: Location expressed as a point
          nullable: true
        polygon:
          type: string
          description: Location expressed as a polygon
          nullable: true
        calculatedPoint:
          type: string
          description: Used to determine whether or not we may update the point. An
            end-user has not entered a point manually if the value of the calculated
            point is the same as point
          readOnly: true
      description: Geographical location
      nullable: true
    HighlightedContent:
      type: object
      properties:
        researchOutputs:
          type: array
          description: References to highlighted research outputs.
          nullable: true
          items:
            $ref: '#/components/schemas/ResearchOutputRef'
        activities:
          type: array
          description: References to highlighted activities.
          nullable: true
          items:
            $ref: '#/components/schemas/ActivityRef'
        applications:
          type: array
          description: References to highlighted applications.
          nullable: true
          items:
            $ref: '#/components/schemas/ApplicationRef'
        awards:
          type: array
          description: References to highlighted awards.
          nullable: true
          items:
            $ref: '#/components/schemas/AwardRef'
      description: A person's highlighted content
    HonoraryStaffOrganizationAssociation:
      type: object
      description: A relation describing the association between honorary staff and
        organisation
      allOf:
      - $ref: '#/components/schemas/PersonOrganizationAssociation'
      - type: object
        properties:
          jobDescription:
            $ref: '#/components/schemas/LocalizedString'
          jobTitle:
            $ref: '#/components/schemas/ClassificationRef'
    ISSN:
      required:
      - issn
      type: object
      properties:
        startDate:
          $ref: '#/components/schemas/CompoundDate'
        endDate:
          $ref: '#/components/schemas/CompoundDate'
        issn:
          type: string
          description: The actual ISSN value
      description: An ISSN of a journal, can be populated with a start and end date
        if the ISSN is only used in a specific period.
    Id:
      required:
      - idSource
      - value
      type: object
      description: An external ID
      allOf:
      - $ref: '#/components/schemas/Identifier'
      - type: object
        properties:
          pureId:
            type: integer
            description: Pure database ID of the object
            format: int64
            readOnly: true
          idSource:
            type: string
            description: Name of the external source
          value:
            type: string
            description: External ID
    Identifier:
      type: object
      properties:
        typeDiscriminator:
          type: string
          description: A Identifier type discriminator property so we can differentiate
            between the different sub-types
      discriminator:
        propertyName: typeDiscriminator
        mapping:
          ClassifiedId: '#/components/schemas/ClassifiedId'
          Id: '#/components/schemas/Id'
    InternalOrExternalSupervisor:
      type: object
      properties:
        externalSupervisor:
          $ref: '#/components/schemas/ExternalPersonRef'
        supervisor:
          $ref: '#/components/schemas/PersonRef'
      description: A supervisor, either internal or external, use as mutually exclusive
    Journal:
      type: object
      properties:
        pureId:
          type: integer
          description: Pure database ID of the object, prefer using the UUID if it
            is present on the entity
          format: int64
          readOnly: true
        uuid:
          type: string
          description: UUID, this is the primary identity of the entity
          format: uuid
          readOnly: true
        createdBy:
          type: string
          description: Username of creator
          readOnly: true
        createdDate:
          type: string
          description: Date and time of creation
          format: date-time
          readOnly: true
        modifiedBy:
          type: string
          description: Username of the user that performed a modification
          readOnly: true
        modifiedDate:
          type: string
          description: Date and time of last modification
          format: date-time
          readOnly: true
        portalUrl:
          type: string
          description: URL of the content on the Pure Portal
          readOnly: true
        prettyUrlIdentifiers:
          type: array
          description: All pretty URLs
          readOnly: true
          items:
            type: string
            description: All pretty URLs
            readOnly: true
        previousUuids:
          type: array
          description: UUIDs of other content items which have been merged into this
            content item (or similar)
          readOnly: true
          items:
            type: string
            description: UUIDs of other content items which have been merged into
              this content item (or similar)
            readOnly: true
        externallyManaged:
          type: boolean
          description: Signals that the information is maintained by synchronization
            from an external system
          readOnly: true
        version:
          type: string
          description: A hash representing the current version of the content. For
            new content this is null, and for existing content the current value.
            The property should never be modified explicitly by a client.
          nullable: true
        issns:
          type: array
          description: International Standard Serial Numbers of the journal, ISSNs
            in this list are searchable and selectable when relating the journal to
            other content
          nullable: true
          items:
            $ref: '#/components/schemas/ISSN'
        additionalSearchableIssns:
          type: array
          description: Additional International Standard Serial Numbers of the journal,
            ISSNs in this list are searchable but not selectable when relating the
            journal to other content
          nullable: true
          items:
            $ref: '#/components/schemas/AdditionalISSN'
        country:
          $ref: '#/components/schemas/ClassificationRef'
        indexedInDoaj:
          type: boolean
          description: Whether the journal is present in the Directory of Open Access
            Journals
        keywordGroups:
          type: array
          description: Keywords associated with the journal
          nullable: true
          items:
            $ref: '#/components/schemas/KeywordGroup'
        links:
          type: array
          description: Links to websites or other URLs associated with the journal
          nullable: true
          items:
            $ref: '#/components/schemas/Link'
        publisher:
          $ref: '#/components/schemas/PublisherRef'
        identifiers:
          type: array
          description: Identifiers of the Journal, often used to identify the journal
            in other sources, an example could be the Scopus Id of the journal
          nullable: true
          items:
            $ref: '#/components/schemas/Identifier'
        titles:
          type: array
          description: Titles of the journal, these titles will be available for use
            when relating the journal to other content.
          items:
            $ref: '#/components/schemas/JournalTitle'
        additionalSearchableTitles:
          type: array
          description: Additional searchable titles of the journal, often abbreviations
            that are not used to show a journal, cannot be used when relating the
            journal to other content.
          nullable: true
          items:
            type: string
        type:
          $ref: '#/components/schemas/ClassificationRef'
        workflow:
          $ref: '#/components/schemas/Workflow'
        systemName:
          type: string
          description: The content system name
          readOnly: true
      description: A periodical presenting articles on a particular subject.
    JournalListResult:
      type: object
      properties:
        count:
          type: integer
          description: The full count, ignoring paging
          format: int32
        pageInformation:
          $ref: '#/components/schemas/PageInformation'
        navigationLinks:
          type: array
          description: Links to navigate from this result. Such as a 'prev' link to
            link to the previous page of items
          items:
            $ref: '#/components/schemas/NavigationLink'
        items:
          type: array
          items:
            $ref: '#/components/schemas/Journal'
      description: A list of journals
    JournalRef:
      required:
      - systemName
      - uuid
      type: object
      description: A reference to a Journal
      allOf:
      - $ref: '#/components/schemas/ContentRef'
    JournalTitle:
      required:
      - title
      type: object
      properties:
        title:
          type: string
          description: The title of the journal
        startDate:
          $ref: '#/components/schemas/CompoundDate'
        endDate:
          $ref: '#/components/schemas/CompoundDate'
      description: A title of a journal, can be populated with a start and end date
        if the title is only used in a specific period.
    JournalsQuery:
      type: object
      properties:
        uuids:
          type: array
          items:
            type: string
            format: uuid
        size:
          type: integer
          format: int32
        offset:
          type: integer
          format: int32
        orderings:
          type: array
          items:
            type: string
        keywordURIs:
          type: array
          items:
            type: string
        searchString:
          type: string
          description: String used to perform search
        orderBy:
          type: string
          writeOnly: true
      description: Create a query for journals
    Keyword:
      required:
      - locale
      type: object
      properties:
        pureId:
          type: integer
          description: Pure database ID of the object, prefer using the UUID if it
            is present on the entity
          format: int64
          readOnly: true
        locale:
          type: string
          description: Locale that user defined keywords are in
        freeKeywords:
          type: array
          description: User defined keywords in a specific locale
          items:
            type: string
      description: List of free keywords
    KeywordContainer:
      required:
      - structuredKeyword
      type: object
      properties:
        pureId:
          type: integer
          description: Pure database ID of the object, prefer using the UUID if it
            is present on the entity
          format: int64
          readOnly: true
        structuredKeyword:
          $ref: '#/components/schemas/ClassificationRef'
        freeKeywords:
          type: array
          description: Free keywords
          nullable: true
          items:
            $ref: '#/components/schemas/Keyword'
      description: Container for a structured keyword and/or free keywords
    KeywordGroup:
      required:
      - logicalName
      - typeDiscriminator
      type: object
      properties:
        pureId:
          type: integer
          description: Pure database ID of the object, prefer using the UUID if it
            is present on the entity
          format: int64
          readOnly: true
        typeDiscriminator:
          type: string
          description: A KeywordGroup type discriminator property so we can differentiate
            between the different sub-types, this is the schema type name of the child
            type.
        logicalName:
          type: string
          description: Unique name of the configuration that specifies this keyword
            group
        name:
          $ref: '#/components/schemas/LocalizedString'
      discriminator:
        propertyName: typeDiscriminator
        mapping:
          ClassificationsKeywordGroup: '#/components/schemas/ClassificationsKeywordGroup'
          FreeKeywordsKeywordGroup: '#/components/schemas/FreeKeywordsKeywordGroup'
          FullKeywordGroup: '#/components/schemas/FullKeywordGroup'
    KeywordGroupConfiguration:
      type: object
      properties:
        pureId:
          type: integer
          description: Pure database ID of the object, prefer using the UUID if it
            is present on the entity
          format: int64
          readOnly: true
        targetSystemName:
          type: string
          description: The content system name this configuration applies to
        keywordGroupType:
          type: string
          description: The OpenAPI schema type of this keyword configuration
        name:
          $ref: '#/components/schemas/LocalizedString'
        description:
          $ref: '#/components/schemas/LocalizedString'
        classificationScheme:
          $ref: '#/components/schemas/ClassificationSchemeRef'
        allowUserdefinedKeywords:
          type: boolean
          description: Defines if user defined keywords are allowed
        limitToLeafSelection:
          type: boolean
        logicalName:
          type: string
      description: A specification of the allowed behavior of a specified keyword
        group
    KeywordGroupConfigurationList:
      type: object
      properties:
        configurations:
          type: array
          items:
            $ref: '#/components/schemas/KeywordGroupConfiguration'
      description: List of keyword group configurations
    Link:
      required:
      - url
      type: object
      properties:
        pureId:
          type: integer
          description: Pure database ID of the object, prefer using the UUID if it
            is present on the entity
          format: int64
          readOnly: true
        url:
          type: string
          description: URL
        description:
          $ref: '#/components/schemas/LocalizedString'
        linkType:
          $ref: '#/components/schemas/ClassificationRef'
      description: A hyperlink
    LocalesList:
      type: object
      properties:
        locales:
          pattern: /^[a-z]{2}_[A-Z]{2}$/
          type: array
          description: Allowed locale values for use in localized string entities.
            The locale format consists of lower-case ISO 639 alpha-2 language code
            and upper-cased ISO 3166 alpha-2 country code.
          items:
            pattern: /^[a-z]{2}_[A-Z]{2}$/
            type: string
            description: Allowed locale values for use in localized string entities.
              The locale format consists of lower-case ISO 639 alpha-2 language code
              and upper-cased ISO 3166 alpha-2 country code.
      description: List of available locales
    LocalizedString:
      type: object
      additionalProperties:
        type: string
        description: A set of localized string values each for a specific submission
          locale. Please note that invalid locale values will be ignored.
        nullable: true
        example: '{"en_GB":"Some text"}'
      description: A set of localized string values each for a specific submission
        locale. Please note that invalid locale values will be ignored.
      nullable: true
      example:
        en_GB: Some text
    Name:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
      description: A name describing a person, made up of given- and family name
    NavigationLink:
      type: object
      properties:
        ref:
          type: string
          description: System name of the kind of link (such as 'prev', 'next' etc.)
          readOnly: true
        href:
          type: string
          description: Link to the resource
          readOnly: true
      description: Link to resource
      readOnly: true
    Note:
      required:
      - text
      type: object
      properties:
        date:
          type: string
          description: Date and time of when the note was created, an event occurred
            or similar. Can be any point in time, but <now> is normally preferred
          format: date-time
        username:
          type: string
          description: Username related to the note. Usually a username of the user
            creating the note. Does not have to be a username of a Pure user
        text:
          type: string
          description: Note text
      description: A note
    NoteListResult:
      type: object
      properties:
        count:
          type: integer
          description: The full count, ignoring paging
          format: int32
        pageInformation:
          $ref: '#/components/schemas/PageInformation'
        navigationLinks:
          type: array
          description: Links to navigate from this result. Such as a 'prev' link to
            link to the previous page of items
          items:
            $ref: '#/components/schemas/NavigationLink'
        items:
          type: array
          description: Notes
          items:
            $ref: '#/components/schemas/Note'
      description: List of notes
    OrderingsList:
      type: object
      properties:
        orderings:
          type: array
          description: IDs of ways content can be ordered
          items:
            type: string
            description: IDs of ways content can be ordered
      description: List of available orderings
    Organization:
      type: object
      properties:
        pureId:
          type: integer
          description: Pure database ID of the object, prefer using the UUID if it
            is present on the entity
          format: int64
          readOnly: true
        uuid:
          type: string
          description: UUID, this is the primary identity of the entity
          format: uuid
          readOnly: true
        createdBy:
          type: string
          description: Username of creator
          readOnly: true
        createdDate:
          type: string
          description: Date and time of creation
          format: date-time
          readOnly: true
        modifiedBy:
          type: string
          description: Username of the user that performed a modification
          readOnly: true
        modifiedDate:
          type: string
          description: Date and time of last modification
          format: date-time
          readOnly: true
        portalUrl:
          type: string
          description: URL of the content on the Pure Portal
          readOnly: true
        prettyUrlIdentifiers:
          type: array
          description: All pretty URLs
          readOnly: true
          items:
            type: string
            description: All pretty URLs
            readOnly: true
        previousUuids:
          type: array
          description: UUIDs of other content items which have been merged into this
            content item (or similar)
          readOnly: true
          items:
            type: string
            description: UUIDs of other content items which have been merged into
              this content item (or similar)
            readOnly: true
        externallyManaged:
          type: boolean
          description: Signals that the information is maintained by synchronization
            from an external system
          readOnly: true
        version:
          type: string
          description: A hash representing the current version of the content. For
            new content this is null, and for existing content the current value.
            The property should never be modified explicitly by a client.
          nullable: true
        name:
          $ref: '#/components/schemas/LocalizedString'
        type:
          $ref: '#/components/schemas/ClassificationRef'
        identifiers:
          type: array
          description: IDs that this object corresponds to in external systems. Such
            as a Scopus ID. Used by Pure where it is necessary to identify objects
            to specific external systems
          nullable: true
          items:
            $ref: '#/components/schemas/Identifier'
        nameVariants:
          type: array
          description: A list of organization name variants
          nullable: true
          items:
            $ref: '#/components/schemas/ClassifiedLocalizedValue'
        profileInformations:
          type: array
          description: A list of organization profile information entries
          nullable: true
          items:
            $ref: '#/components/schemas/ClassifiedLocalizedValue'
        photos:
          type: array
          description: A list of organization photos
          nullable: true
          items:
            $ref: '#/components/schemas/ClassifiedFile'
        addresses:
          type: array
          description: A list of organization addresses
          nullable: true
          items:
            $ref: '#/components/schemas/ClassifiedAddress'
        phoneNumbers:
          type: array
          description: A list of organization phone numbers
          nullable: true
          items:
            $ref: '#/components/schemas/ClassifiedValue'
        emails:
          type: array
          description: A list of organization email addresses
          nullable: true
          items:
            $ref: '#/components/schemas/ClassifiedValue'
        webAddresses:
          type: array
          description: A list of organization web addresses
          nullable: true
          items:
            $ref: '#/components/schemas/ClassifiedLocalizedValue'
        lifecycle:
          $ref: '#/components/schemas/DateRange'
        takenOverBy:
          $ref: '#/components/schemas/OrganizationRef'
        parents:
          type: array
          description: A list of parent organizations
          nullable: true
          items:
            $ref: '#/components/schemas/OrganizationRef'
        contactPersons:
          type: array
          description: A list of organization contact persons
          nullable: true
          items:
            $ref: '#/components/schemas/PersonRef'
        keywordGroups:
          type: array
          description: A group for each type of keyword present
          nullable: true
          items:
            $ref: '#/components/schemas/KeywordGroup'
        costCenters:
          type: array
          description: A list of cost center classifications
          nullable: true
          items:
            $ref: '#/components/schemas/ClassificationRef'
        visibility:
          $ref: '#/components/schemas/Visibility'
        systemName:
          type: string
          description: The content system name
          readOnly: true
      description: An organization in the institution
    OrganizationListResult:
      type: object
      properties:
        count:
          type: integer
          description: The full count, ignoring paging
          format: int32
        pageInformation:
          $ref: '#/components/schemas/PageInformation'
        navigationLinks:
          type: array
          description: Links to navigate from this result. Such as a 'prev' link to
            link to the previous page of items
          items:
            $ref: '#/components/schemas/NavigationLink'
        items:
          type: array
          items:
            $ref: '#/components/schemas/Organization'
      description: A list of organizations
    OrganizationOrExternalOrganizationRef:
      type: object
      properties:
        organizationRef:
          $ref: '#/components/schemas/OrganizationRef'
        externalOrganizationRef:
          $ref: '#/components/schemas/ExternalOrganizationRef'
      description: A reference to an organization in the institution or an external
        organization
    OrganizationRef:
      required:
      - systemName
      - uuid
      type: object
      description: A reference to an organization in the institution
      allOf:
      - $ref: '#/components/schemas/ContentRef'
    OrganizationsQuery:
      type: object
      properties:
        uuids:
          type: array
          items:
            type: string
            format: uuid
        size:
          type: integer
          format: int32
        offset:
          type: integer
          format: int32
        orderings:
          type: array
          items:
            type: string
        keywordURIs:
          type: array
          items:
            type: string
        searchString:
          type: string
          description: String used to perform search
        orderBy:
          type: string
          writeOnly: true
      description: Create a query for organizations
    PageInformation:
      type: object
      properties:
        offset:
          type: integer
          description: Offset that returned items start at
          format: int32
        size:
          type: integer
          description: The requested number of items. May be higher than the actual
            number of items in the result if there are fewer items in the store than
            requested
          format: int32
      description: Information about pages
    Person:
      type: object
      properties:
        pureId:
          type: integer
          description: Pure database ID of the object, prefer using the UUID if it
            is present on the entity
          format: int64
          readOnly: true
        uuid:
          type: string
          description: UUID, this is the primary identity of the entity
          format: uuid
          readOnly: true
        createdBy:
          type: string
          description: Username of creator
          readOnly: true
        createdDate:
          type: string
          description: Date and time of creation
          format: date-time
          readOnly: true
        modifiedBy:
          type: string
          description: Username of the user that performed a modification
          readOnly: true
        modifiedDate:
          type: string
          description: Date and time of last modification
          format: date-time
          readOnly: true
        portalUrl:
          type: string
          description: URL of the content on the Pure Portal
          readOnly: true
        prettyUrlIdentifiers:
          type: array
          description: All pretty URLs
          readOnly: true
          items:
            type: string
            description: All pretty URLs
            readOnly: true
        previousUuids:
          type: array
          description: UUIDs of other content items which have been merged into this
            content item (or similar)
          readOnly: true
          items:
            type: string
            description: UUIDs of other content items which have been merged into
              this content item (or similar)
            readOnly: true
        externallyManaged:
          type: boolean
          description: Signals that the information is maintained by synchronization
            from an external system
          readOnly: true
        version:
          type: string
          description: A hash representing the current version of the content. For
            new content this is null, and for existing content the current value.
            The property should never be modified explicitly by a client.
          nullable: true
        startDateAsResearcher:
          type: string
          description: Date that the person entered into the academic profession.
          format: date-time
        affiliationNote:
          type: string
          description: Notes regarding affiliations of the person.
        dateOfBirth:
          type: string
          description: The person's date of birth.
          format: date-time
        employeeStartDate:
          type: string
          description: Date of the persons first day of the institution.
          format: date-time
        externalPositions:
          type: array
          description: positions held by the person, that are external to the institution
          nullable: true
          items:
            $ref: '#/components/schemas/ExternalAppointment'
        keywordGroups:
          type: array
          description: Groups of Keyword associated with the person.
          nullable: true
          items:
            $ref: '#/components/schemas/KeywordGroup'
        leavesOfAbsence:
          type: array
          description: Leaves of absence had by the person.
          nullable: true
          items:
            $ref: '#/components/schemas/PersonClassifiedLeaveOfAbsence'
        links:
          type: array
          description: Links associated with the person.
          nullable: true
          items:
            $ref: '#/components/schemas/Link'
        name:
          $ref: '#/components/schemas/Name'
        names:
          type: array
          description: Variant names of the person, Known aliases, ect.
          nullable: true
          items:
            $ref: '#/components/schemas/ClassifiedName'
        nationality:
          $ref: '#/components/schemas/ClassificationRef'
        orcid:
          type: string
          description: orcid of the person .
        honoraryStaffOrganizationAssociations:
          type: array
          description: Organisations that the person is associated with under the
            title of 'Honorary Staff'
          nullable: true
          items:
            $ref: '#/components/schemas/HonoraryStaffOrganizationAssociation'
        staffOrganizationAssociations:
          type: array
          description: Organizations that the person is associated with as 'Staff'
          nullable: true
          items:
            $ref: '#/components/schemas/StaffOrganizationAssociation'
        studentOrganizationAssociations:
          type: array
          description: Organizations that the person is associated with as a 'Student'
          nullable: true
          items:
            $ref: '#/components/schemas/StudentOrganizationAssociation'
        visitingScholarOrganizationAssociations:
          type: array
          description: Organizations that the person is associated with as a 'Visiting
            Scholar
          nullable: true
          items:
            $ref: '#/components/schemas/VisitingScholarOrganizationAssociation'
        academicQualifications:
          type: array
          description: Levels of academic qualifications that the person has achieved.
          nullable: true
          items:
            $ref: '#/components/schemas/AcademicQualification'
        profilePhotos:
          type: array
          description: Profile photos in the form of Image files. The maximum file
            size is 1mb
          nullable: true
          items:
            $ref: '#/components/schemas/ClassifiedFile'
        privateAddress:
          $ref: '#/components/schemas/Address'
        professionalQualifications:
          type: array
          description: The professional qualifications held by the person
          nullable: true
          items:
            $ref: '#/components/schemas/ProfessionalQualification'
        selectedForProfileRefinementService:
          type: boolean
          description: If the person has been profiled.
        profileInformation:
          type: array
          description: Information objects making up profiles made of the person
          nullable: true
          items:
            $ref: '#/components/schemas/ClassifiedLocalizedValue'
        retirementDate:
          type: string
          description: Date of retirement for the person
          format: date-time
          nullable: true
        gender:
          $ref: '#/components/schemas/ClassificationRef'
        titles:
          type: array
          description: Titles held by the person
          nullable: true
          items:
            $ref: '#/components/schemas/ClassifiedLocalizedValue'
        visibility:
          $ref: '#/components/schemas/Visibility'
        willingToTakePhdStudents:
          type: boolean
          description: Boolean to define if the Person is willing to take on Phd Students.
        willingToTakePhdStudentsDescription:
          type: string
          description: Field to describe or list phd projects that the person will
            participate in.
        identifiers:
          type: array
          description: Identifiers related to the person
          nullable: true
          items:
            $ref: '#/components/schemas/Identifier'
        user:
          $ref: '#/components/schemas/UserRef'
        systemName:
          type: string
          description: The content system name
          readOnly: true
      description: An academic professional, student, or other individual attatched
        to the institution.
    PersonClassifiedLeaveOfAbsence:
      type: object
      properties:
        pureId:
          type: integer
          description: Pure database ID of the object, prefer using the UUID if it
            is present on the entity
          format: int64
          readOnly: true
        classification:
          $ref: '#/components/schemas/ClassificationRef'
        period:
          $ref: '#/components/schemas/DateRange'
      description: Leave of absence held by a person
    PersonListResult:
      type: object
      properties:
        count:
          type: integer
          description: The full count, ignoring paging
          format: int32
        pageInformation:
          $ref: '#/components/schemas/PageInformation'
        navigationLinks:
          type: array
          description: Links to navigate from this result. Such as a 'prev' link to
            link to the previous page of items
          items:
            $ref: '#/components/schemas/NavigationLink'
        items:
          type: array
          description: Persons
          items:
            $ref: '#/components/schemas/Person'
      description: List of persons. Can contain a subset of all items along with the
        full count
    PersonOrganizationAssociation:
      required:
      - typeDiscriminator
      type: object
      properties:
        pureId:
          type: integer
          description: Pure database ID of the object, prefer using the UUID if it
            is present on the entity
          format: int64
          readOnly: true
        addresses:
          type: array
          description: List of physical addresses.
          nullable: true
          items:
            $ref: '#/components/schemas/ClassifiedAddress'
        affiliationId:
          type: string
          description: Affiliation identification. This could be a student ID or a
            staff ID.
        employmentType:
          $ref: '#/components/schemas/ClassificationRef'
        organization:
          $ref: '#/components/schemas/OrganizationRef'
        emails:
          type: array
          description: List of emails.
          nullable: true
          items:
            $ref: '#/components/schemas/ClassifiedValue'
        webAddresses:
          type: array
          description: List of web addresses.
          nullable: true
          items:
            $ref: '#/components/schemas/ClassifiedLocalizedValue'
        phoneNumbers:
          type: array
          items:
            $ref: '#/components/schemas/ClassifiedValue'
        period:
          $ref: '#/components/schemas/DateRange'
        supervisorAssociations:
          type: array
          description: List of associations to persons who supervise this person.
          nullable: true
          items:
            $ref: '#/components/schemas/PersonSupervisorAssociation'
        keywordGroups:
          type: array
          description: List of keyword groups.
          nullable: true
          items:
            $ref: '#/components/schemas/KeywordGroup'
        primaryAssociation:
          type: boolean
          description: A boolean value indicating whether this is the primary association
            or not. Only one of the associations from a person to an organisation
            will be primary.
        typeDiscriminator:
          type: string
      nullable: true
      discriminator:
        propertyName: typeDiscriminator
        mapping:
          HonoraryStaffOrganizationAssociation: '#/components/schemas/HonoraryStaffOrganizationAssociation'
          StaffOrganizationAssociation: '#/components/schemas/StaffOrganizationAssociation'
          StudentOrganizationAssociation: '#/components/schemas/StudentOrganizationAssociation'
          VisitingScholarOrganizationAssociation: '#/components/schemas/VisitingScholarOrganizationAssociation'
    PersonRef:
      required:
      - systemName
      - uuid
      type: object
      description: A reference to a person internal to the institution
      allOf:
      - $ref: '#/components/schemas/ContentRef'
    PersonSuperviseeAssociation:
      type: object
      properties:
        pureId:
          type: integer
          description: Pure database ID of the object, prefer using the UUID if it
            is present on the entity
          format: int64
          readOnly: true
        period:
          $ref: '#/components/schemas/DateRange'
        supervisionPercentage:
          maximum: 100
          minimum: 0
          type: integer
          description: Percentage for which the Supervisor is responsible for the
            total supervision
          format: int32
        supervisorRole:
          $ref: '#/components/schemas/ClassificationRef'
        supervisee:
          $ref: '#/components/schemas/PersonRef'
      description: Association between a person and their supervisee
    PersonSuperviseeAssociationListResult:
      type: object
      properties:
        count:
          type: integer
          description: The full count, ignoring paging
          format: int32
        pageInformation:
          $ref: '#/components/schemas/PageInformation'
        navigationLinks:
          type: array
          description: Links to navigate from this result. Such as a 'prev' link to
            link to the previous page of items
          items:
            $ref: '#/components/schemas/NavigationLink'
        items:
          type: array
          description: Supervisee Associations
          items:
            $ref: '#/components/schemas/PersonSuperviseeAssociation'
      description: A list of supervision associations between persons
    PersonSupervisorAssociation:
      type: object
      properties:
        pureId:
          type: integer
          description: Pure database ID of the object, prefer using the UUID if it
            is present on the entity
          format: int64
          readOnly: true
        period:
          $ref: '#/components/schemas/DateRange'
        supervisionPercentage:
          maximum: 100
          minimum: 0
          type: integer
          description: Percentage for which the Supervisor is responsible for the
            total supervision
          format: int32
        supervisorRole:
          $ref: '#/components/schemas/ClassificationRef'
        supervisor:
          $ref: '#/components/schemas/InternalOrExternalSupervisor'
      description: The association data of a person and their supervisor
    PersonsQuery:
      type: object
      properties:
        uuids:
          type: array
          items:
            type: string
            format: uuid
        size:
          type: integer
          format: int32
        offset:
          type: integer
          format: int32
        orderings:
          type: array
          items:
            type: string
        keywordURIs:
          type: array
          items:
            type: string
        searchString:
          type: string
          description: String used to perform search
        orderBy:
          type: string
          writeOnly: true
      description: Create a query for persons
    ProblemDetails:
      type: object
      properties:
        type:
          type: string
          description: A URI reference [RFC3986] that identifies the problem type.
        title:
          type: string
          description: A short, human-readable summary of the problem type. It SHOULD
            NOT change from occurrence to occurrence of the problem, except for purposes
            of localization (e.g., using proactive content negotiation; see [RFC7231],
            Section 3.4).
        status:
          type: integer
          description: The HTTP status code ([RFC7231], Section 6) generated by the
            origin server for this occurrence of the problem.
          format: int32
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of
            the problem.
        instance:
          type: string
          description: A URI reference that identifies the specific occurrence of
            the problem.  It may or may not yield further information if dereferenced.
      description: RFC7807 Error details
      discriminator:
        propertyName: type
        mapping:
          /error: '#/components/schemas/GenericProblemDetails'
          /validation-error: '#/components/schemas/ValidationProblemDetails'
          /dependency-violation-error: '#/components/schemas/DependencyViolationProblemDetails'
    ProfessionalQualification:
      type: object
      properties:
        pureId:
          type: integer
          description: Pure database ID of the object, prefer using the UUID if it
            is present on the entity
          format: int64
          readOnly: true
        abbreviatedQualification:
          $ref: '#/components/schemas/LocalizedString'
        period:
          $ref: '#/components/schemas/CompoundDateRange'
        qualification:
          $ref: '#/components/schemas/LocalizedString'
      description: The professional qualifications held by a person
    Publisher:
      required:
      - name
      type: object
      properties:
        pureId:
          type: integer
          description: Pure database ID of the object, prefer using the UUID if it
            is present on the entity
          format: int64
          readOnly: true
        uuid:
          type: string
          description: UUID, this is the primary identity of the entity
          format: uuid
          readOnly: true
        createdBy:
          type: string
          description: Username of creator
          readOnly: true
        createdDate:
          type: string
          description: Date and time of creation
          format: date-time
          readOnly: true
        modifiedBy:
          type: string
          description: Username of the user that performed a modification
          readOnly: true
        modifiedDate:
          type: string
          description: Date and time of last modification
          format: date-time
          readOnly: true
        portalUrl:
          type: string
          description: URL of the content on the Pure Portal
          readOnly: true
        prettyUrlIdentifiers:
          type: array
          description: All pretty URLs
          readOnly: true
          items:
            type: string
            description: All pretty URLs
            readOnly: true
        previousUuids:
          type: array
          description: UUIDs of other content items which have been merged into this
            content item (or similar)
          readOnly: true
          items:
            type: string
            description: UUIDs of other content items which have been merged into
              this content item (or similar)
            readOnly: true
        externallyManaged:
          type: boolean
          description: Signals that the information is maintained by synchronization
            from an external system
          readOnly: true
        version:
          type: string
          description: A hash representing the current version of the content. For
            new content this is null, and for existing content the current value.
            The property should never be modified explicitly by a client.
          nullable: true
        name:
          type: string
          description: Name of the Publisher
        alternativeNames:
          type: array
          description: Alternate names for the publisher
          nullable: true
          items:
            type: string
        countries:
          type: array
          description: Countries that publisher is associated with. There are no restrictions
            as to why countries should be added to this list.
          nullable: true
          items:
            $ref: '#/components/schemas/ClassificationRef'
        keywordGroups:
          type: array
          description: A group for each type of keyword present
          nullable: true
          items:
            $ref: '#/components/schemas/KeywordGroup'
        identifiers:
          type: array
          description: IDs that this object corresponds to in external systems. Such
            as a Scopus ID. Used by Pure where it is necessary to identify objects
            to specific external systems
          nullable: true
          items:
            $ref: '#/components/schemas/Identifier'
        type:
          $ref: '#/components/schemas/ClassificationRef'
        workflow:
          $ref: '#/components/schemas/Workflow'
        systemName:
          type: string
          description: The content system name
          readOnly: true
      description: A publisher known to institution
    PublisherListResult:
      type: object
      properties:
        count:
          type: integer
          description: The full count, ignoring paging
          format: int32
        pageInformation:
          $ref: '#/components/schemas/PageInformation'
        navigationLinks:
          type: array
          description: Links to navigate from this result. Such as a 'prev' link to
            link to the previous page of items
          items:
            $ref: '#/components/schemas/NavigationLink'
        items:
          type: array
          description: Publishers
          items:
            $ref: '#/components/schemas/Publisher'
      description: List of publishers. Can contain a subset of all items along with
        the full count
    PublisherRef:
      required:
      - systemName
      - uuid
      type: object
      description: A reference to a publisher
      allOf:
      - $ref: '#/components/schemas/ContentRef'
    PublishersQuery:
      type: object
      properties:
        uuids:
          type: array
          items:
            type: string
            format: uuid
        size:
          type: integer
          format: int32
        offset:
          type: integer
          format: int32
        orderings:
          type: array
          items:
            type: string
        keywordURIs:
          type: array
          items:
            type: string
        searchString:
          type: string
          description: String used to perform search
        orderBy:
          type: string
          writeOnly: true
      description: Create a query for publishers
    ResearchOutputRef:
      required:
      - systemName
      - uuid
      type: object
      description: A reference to a research output
      allOf:
      - $ref: '#/components/schemas/ContentRef'
    StaffOrganizationAssociation:
      type: object
      description: A relation describing the association between Staff and organisation
      allOf:
      - $ref: '#/components/schemas/PersonOrganizationAssociation'
      - type: object
        properties:
          contractType:
            $ref: '#/components/schemas/ClassificationRef'
          fte:
            type: number
            description: The FTE (Full-Time Equivalent). A decimal number ranging
              between 0 (0% equivalent of full time) and 1 (100% equivalent of full
              time).
            format: double
          jobDescription:
            $ref: '#/components/schemas/LocalizedString'
          jobTitle:
            $ref: '#/components/schemas/ClassificationRef'
          staffType:
            $ref: '#/components/schemas/ClassificationRef'
    StudentOrganizationAssociation:
      type: object
      description: A relation describing the association between student and organisation
      allOf:
      - $ref: '#/components/schemas/PersonOrganizationAssociation'
      - type: object
        properties:
          awardDate:
            type: string
            description: The date when the student received an award.
            format: date-time
          awardGained:
            type: string
            description: Description of what award the student gained.
          programme:
            type: string
            description: The name or title of a program often consists of the degree
              (e.g., BS) and the discipline or field of study (e.g., Business Administration).
          projectTitle:
            $ref: '#/components/schemas/LocalizedString'
          fte:
            type: number
            format: double
    SystemLocalizedString:
      type: object
      additionalProperties:
        type: string
        description: A set of localized string values each for a specific UI locale.
        nullable: true
        example: '{"en_GB":"Some text"}'
      description: A set of localized string values each for a specific UI locale.
      nullable: true
      example:
        en_GB: Some text
    UploadedFile:
      required:
      - key
      type: object
      properties:
        digest:
          type: string
          description: The calculated digest for the file in Pure
          readOnly: true
        digestType:
          type: string
          description: The digest type
          readOnly: true
        size:
          type: integer
          description: The file size of the file in Pure
          format: int64
          readOnly: true
        mimeType:
          type: string
          description: The mime type detected for the file
          readOnly: true
        timeStamp:
          type: string
          description: The timestamp Pure received the file
          format: date-time
          readOnly: true
        expires:
          type: string
          description: The timestamp where Pure deletes the uploaded file if it has
            not been attached to any content
          format: date-time
          readOnly: true
        key:
          type: string
          description: Pure key identifer for the file upload
          readOnly: true
      description: Information about the uploaded file
      writeOnly: true
    UserRef:
      required:
      - systemName
      - uuid
      type: object
      description: A reference to an user
      allOf:
      - $ref: '#/components/schemas/ContentRef'
    ValidationError:
      type: object
      properties:
        path:
          type: string
        code:
          type: string
        title:
          $ref: '#/components/schemas/SystemLocalizedString'
      description: Validation error
    ValidationProblemDetails:
      type: object
      description: Problem details for validation failures
      allOf:
      - $ref: '#/components/schemas/ProblemDetails'
      - type: object
        properties:
          errors:
            type: array
            items:
              $ref: '#/components/schemas/ValidationError'
    Visibility:
      required:
      - key
      type: object
      properties:
        key:
          type: string
          description: Visibility value
          enum:
          - FREE
          - CAMPUS
          - BACKEND
        description:
          $ref: '#/components/schemas/SystemLocalizedString'
      description: Visibility of an object
    VisitingScholarOrganizationAssociation:
      type: object
      description: A relation describing the association between a visiting scholar
        and organisation
      allOf:
      - $ref: '#/components/schemas/PersonOrganizationAssociation'
      - type: object
        properties:
          jobDescription:
            $ref: '#/components/schemas/LocalizedString'
          jobTitle:
            $ref: '#/components/schemas/ClassificationRef'
          purposeOfStay:
            type: string
            description: Why the visiting shcolar has transfered to the organization.
          visitorFrom:
            $ref: '#/components/schemas/ExternalOrganizationRef'
    Workflow:
      required:
      - step
      type: object
      properties:
        step:
          type: string
          description: Current workflow step
        description:
          $ref: '#/components/schemas/SystemLocalizedString'
      description: Information about workflow
    WorkflowListResult:
      type: object
      properties:
        workflows:
          type: array
          description: Allowed workflow steps.
          items:
            $ref: '#/components/schemas/Workflow'
      description: List of workflow steps.
  securitySchemes:
    api-key:
      type: apiKey
      description: Security mechanism for the API
      name: api-key
      in: header
