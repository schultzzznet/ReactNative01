/**
 * Pure API
 * This is an early access version of the new Pure write API.
 *
 * OpenAPI spec version: 0.1 Early Access
 * Contact: b.plauborg@elsevier.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { AuthorCollaborationRef } from './AuthorCollaborationRef';
import { ClassificationRef } from './ClassificationRef';
import { ExternalOrganizationRef } from './ExternalOrganizationRef';
import { ExternalPersonRef } from './ExternalPersonRef';
import { Name } from './Name';
import { OrganizationRef } from './OrganizationRef';
import { PersonRef } from './PersonRef';
import { HttpFile } from '../http/http';

/**
* An association between research output and a person that has contributed to it
*/
export class ContributorAssociation {
    /**
    * Pure database ID of the object, prefer using the UUID if it is present on the entity
    */
    'pureId'?: number;
    'person'?: PersonRef;
    'externalPerson'?: ExternalPersonRef;
    'name'?: Name;
    'role'?: ClassificationRef;
    /**
    * A collection of organisational unit affiliations.
    */
    'organisationalUnits'?: Array<OrganizationRef>;
    /**
    * A collection of external organisation affiliations.
    */
    'externalOrganisations'?: Array<ExternalOrganizationRef>;
    /**
    * If this contribution should be hidden, this is set to true, false otherwise. This is used for research output that have author collaborations. If they do, we hide the individual contributors.
    */
    'hidden'?: boolean;
    /**
    * A string that details the contribution of the associated person.
    */
    'contributionDescription'?: string;
    /**
    * A real number between 0 and 1, describing the percentage of the contribution of the person.
    */
    'contributionPercentage'?: number;
    'country'?: ClassificationRef;
    /**
    * True if the contributor is the corresponding author, false otherwise.
    */
    'correspondingAuthor'?: boolean;
    'authorCollaboration'?: AuthorCollaborationRef;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "pureId",
            "baseName": "pureId",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "person",
            "baseName": "person",
            "type": "PersonRef",
            "format": ""
        },
        {
            "name": "externalPerson",
            "baseName": "externalPerson",
            "type": "ExternalPersonRef",
            "format": ""
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "Name",
            "format": ""
        },
        {
            "name": "role",
            "baseName": "role",
            "type": "ClassificationRef",
            "format": ""
        },
        {
            "name": "organisationalUnits",
            "baseName": "organisationalUnits",
            "type": "Array<OrganizationRef>",
            "format": ""
        },
        {
            "name": "externalOrganisations",
            "baseName": "externalOrganisations",
            "type": "Array<ExternalOrganizationRef>",
            "format": ""
        },
        {
            "name": "hidden",
            "baseName": "hidden",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "contributionDescription",
            "baseName": "contributionDescription",
            "type": "string",
            "format": ""
        },
        {
            "name": "contributionPercentage",
            "baseName": "contributionPercentage",
            "type": "number",
            "format": "double"
        },
        {
            "name": "country",
            "baseName": "country",
            "type": "ClassificationRef",
            "format": ""
        },
        {
            "name": "correspondingAuthor",
            "baseName": "correspondingAuthor",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "authorCollaboration",
            "baseName": "authorCollaboration",
            "type": "AuthorCollaborationRef",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return ContributorAssociation.attributeTypeMap;
    }
    
    public constructor() {
    }
}

