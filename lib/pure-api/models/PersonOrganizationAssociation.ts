/**
 * Pure API
 * This is an early access version of the new Pure write API.
 *
 * OpenAPI spec version: 0.1 Early Access
 * Contact: b.plauborg@elsevier.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ClassificationRef } from './ClassificationRef';
import { ClassifiedAddress } from './ClassifiedAddress';
import { ClassifiedLocalizedValue } from './ClassifiedLocalizedValue';
import { ClassifiedValue } from './ClassifiedValue';
import { DateRange } from './DateRange';
import { KeywordGroup } from './KeywordGroup';
import { OrganizationRef } from './OrganizationRef';
import { PersonSupervisorAssociation } from './PersonSupervisorAssociation';
import { HttpFile } from '../http/http';

export class PersonOrganizationAssociation {
    /**
    * Pure database ID of the object, prefer using the UUID if it is present on the entity
    */
    'pureId'?: number;
    /**
    * List of physical addresses.
    */
    'addresses'?: Array<ClassifiedAddress>;
    /**
    * Affiliation identification. This could be a student ID or a staff ID.
    */
    'affiliationId'?: string;
    'employmentType'?: ClassificationRef;
    'organization'?: OrganizationRef;
    /**
    * List of emails.
    */
    'emails'?: Array<ClassifiedValue>;
    /**
    * List of web addresses.
    */
    'webAddresses'?: Array<ClassifiedLocalizedValue>;
    'phoneNumbers'?: Array<ClassifiedValue>;
    'period'?: DateRange;
    /**
    * List of associations to persons who supervise this person.
    */
    'supervisorAssociations'?: Array<PersonSupervisorAssociation>;
    /**
    * List of keyword groups.
    */
    'keywordGroups'?: Array<KeywordGroup>;
    /**
    * A boolean value indicating whether this is the primary association or not. Only one of the associations from a person to an organisation will be primary.
    */
    'primaryAssociation'?: boolean;
    'typeDiscriminator': string;

    static readonly discriminator: string | undefined = "typeDiscriminator";

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "pureId",
            "baseName": "pureId",
            "type": "number",
            "format": "int64"
        },
        {
            "name": "addresses",
            "baseName": "addresses",
            "type": "Array<ClassifiedAddress>",
            "format": ""
        },
        {
            "name": "affiliationId",
            "baseName": "affiliationId",
            "type": "string",
            "format": ""
        },
        {
            "name": "employmentType",
            "baseName": "employmentType",
            "type": "ClassificationRef",
            "format": ""
        },
        {
            "name": "organization",
            "baseName": "organization",
            "type": "OrganizationRef",
            "format": ""
        },
        {
            "name": "emails",
            "baseName": "emails",
            "type": "Array<ClassifiedValue>",
            "format": ""
        },
        {
            "name": "webAddresses",
            "baseName": "webAddresses",
            "type": "Array<ClassifiedLocalizedValue>",
            "format": ""
        },
        {
            "name": "phoneNumbers",
            "baseName": "phoneNumbers",
            "type": "Array<ClassifiedValue>",
            "format": ""
        },
        {
            "name": "period",
            "baseName": "period",
            "type": "DateRange",
            "format": ""
        },
        {
            "name": "supervisorAssociations",
            "baseName": "supervisorAssociations",
            "type": "Array<PersonSupervisorAssociation>",
            "format": ""
        },
        {
            "name": "keywordGroups",
            "baseName": "keywordGroups",
            "type": "Array<KeywordGroup>",
            "format": ""
        },
        {
            "name": "primaryAssociation",
            "baseName": "primaryAssociation",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "typeDiscriminator",
            "baseName": "typeDiscriminator",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return PersonOrganizationAssociation.attributeTypeMap;
    }
    
    public constructor() {
        this.typeDiscriminator = "PersonOrganizationAssociation";
    }
}

