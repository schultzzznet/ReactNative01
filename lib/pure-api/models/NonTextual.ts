/**
 * Pure API
 * This is an early access version of the new Pure write API.
 *
 * OpenAPI spec version: 0.1 Early Access
 * Contact: b.plauborg@elsevier.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { AdditionalFileElectronicVersion } from './AdditionalFileElectronicVersion';
import { ArticleProcessingCharge } from './ArticleProcessingCharge';
import { ClassificationRef } from './ClassificationRef';
import { ClassifiedLocalizedValue } from './ClassifiedLocalizedValue';
import { ContributorAssociation } from './ContributorAssociation';
import { ElectronicVersion } from './ElectronicVersion';
import { EventRef } from './EventRef';
import { ExternalOrganizationRef } from './ExternalOrganizationRef';
import { FormattedString } from './FormattedString';
import { Identifier } from './Identifier';
import { KeywordGroup } from './KeywordGroup';
import { Link } from './Link';
import { NonTextualAllOf } from './NonTextualAllOf';
import { OrganizationRef } from './OrganizationRef';
import { PublicationStatus } from './PublicationStatus';
import { PublisherRef } from './PublisherRef';
import { ResearchOutput } from './ResearchOutput';
import { Visibility } from './Visibility';
import { Workflow } from './Workflow';
import { HttpFile } from '../http/http';

/**
* Research output that is not explicitly text, e.g. content with main focus on audio or images.
*/
export class NonTextual extends ResearchOutput {
    /**
    * The place of publication.
    */
    'placeOfPublication'?: string;
    /**
    * The edition that the production was published in.
    */
    'edition'?: string;
    'publisher'?: PublisherRef;
    'event'?: EventRef;
    'outputMedia'?: ClassificationRef;
    /**
    * The size of the production.
    */
    'size'?: string;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "placeOfPublication",
            "baseName": "placeOfPublication",
            "type": "string",
            "format": ""
        },
        {
            "name": "edition",
            "baseName": "edition",
            "type": "string",
            "format": ""
        },
        {
            "name": "publisher",
            "baseName": "publisher",
            "type": "PublisherRef",
            "format": ""
        },
        {
            "name": "event",
            "baseName": "event",
            "type": "EventRef",
            "format": ""
        },
        {
            "name": "outputMedia",
            "baseName": "outputMedia",
            "type": "ClassificationRef",
            "format": ""
        },
        {
            "name": "size",
            "baseName": "size",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(NonTextual.attributeTypeMap);
    }
    
    public constructor() {
        super();
        this.typeDiscriminator = "NonTextual";
    }
}

